interface ITaskSettings {
    allow: Boolean!
    coolDown: CoolDown!
}

type GeneralSettings {
    autoBuild: Boolean!
}

type GeneralVillageSettings {
    allowTasks: Boolean!
}

type AutoBuildSettings implements ITaskSettings {
    allow: Boolean!
    coolDown: CoolDown!
}

type AutoAdventureSettings implements ITaskSettings {
    allow: Boolean!
    coolDown: CoolDown!

    adventureCriteria: Int!
    preferHard: Boolean!
    normalMinHealth: Int!
    hardMinHealth: Int!
    maxTravelTime: Int!
    preferredVillageId: Int
}

type HeroSettings {
    autoAdventure: AutoAdventureSettings!
}

type VillageSettings {
    general: GeneralVillageSettings!
    autoBuild: AutoBuildSettings!
}

extend type Query {
    generalSettings: GeneralSettings!
    hero: HeroSettings!
    villageSettings(villageId: Int!): VillageSettings!
}

input GeneralVillageSettingsInput {
    allowTasks: Boolean!
}

input AutoBuildVillageSettingsInput {
    allow: Boolean!
    coolDown: CoolDownInput!
}

input AutoAdventureSettingsInput {
    allow: Boolean!
    coolDown: CoolDownInput!

    adventureCriteria: Int!
    preferHard: Boolean!
    normalMinHealth: Int!
    hardMinHealth: Int!
    maxTravelTime: Int!
    preferredVillageId: Int
}

input GeneralSettingsInput {
    autoBuild: Boolean!
}

input UpdateAutoBuildVillageSettingsInput {
    villageId: Int!
    settings: AutoBuildVillageSettingsInput!
}

input UpdateGeneralVillageSettingsInput {
    villageId: Int!
    settings: GeneralVillageSettingsInput!
}

input UpdateGeneralSettingsInput {
    settings: GeneralSettingsInput!
}

input UpdateAutoAdventureSettingsInput {
    settings: AutoAdventureSettingsInput!
}

extend type Mutation {
    updateGeneralSettings(input: UpdateGeneralSettingsInput!): Boolean!
    updateAutoAdventureSettings(input: UpdateAutoAdventureSettingsInput!): Boolean!
    updateGeneralVillageSettings(input: UpdateGeneralVillageSettingsInput!): Boolean!
    updateAutoBuildVillageSettings(input: UpdateAutoBuildVillageSettingsInput!): Boolean!
}
