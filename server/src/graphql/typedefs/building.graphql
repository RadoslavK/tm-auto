type BuildingLevel {
    actual: Int!
    inProgress: Int!
    queued: Int!
    total: Int!
}

type BuildingSpot {
    fieldId: Int!
    level: BuildingLevel!
    type: Int!
}

type ResourceFields {
    wood: [BuildingSpot!]!
    clay: [BuildingSpot!]!
    iron: [BuildingSpot!]!
    crop: [BuildingSpot!]!
}

type BuildingSpots {
    infrastructure: [BuildingSpot!]!
    resources: ResourceFields!
}

type Cost {
    wood: Int!
    clay: Int!
    iron: Int!
    crop: Int!
    total: Int!
    freeCrop: Int!
}

type Building {
    lol: Int
}

type QueuedBuilding {
    cost: Cost!
    level: Int!
    name: String!
    time: String!
    type: Int!
    queueIndex: Int!
}

type BuildingInProgress {
    level: Int!
    time: String!
    type: Int!
}

type BuildingQueue {
    buildings: [QueuedBuilding!]!
    totalCost: Cost!
    totalBuildingTime: String!
}

extend type Query {
    buildingSpots(villageId: Int!): BuildingSpots!
    buildingsInProgress(villageId: Int!): [BuildingInProgress!]!
    buildingQueue(villageId: Int!): BuildingQueue!
}

input ClearQueueInput {
    villageId: Int!
}

input EnqueueBuildingInput {
    fieldId: Int!
    type: Int!
    villageId: Int!
}

input DequeueBuildingInput {
    villageId: Int!
    queueIndex: Int!
}

extend type Mutation {
    clearQueue(villageId: Int!): Boolean!
    dequeueBuilding(input: DequeueBuildingInput): Boolean!
    enqueueBuilding(input: EnqueueBuildingInput): Boolean!
}

type NewBuildingInfo {
    name: String!
    type: Int!
}

input AvailableNewBuildingsInput {
    fieldId: Int!
    villageId: Int!
}

extend type Query {
    availableNewBuildings(input: AvailableNewBuildingsInput!): [NewBuildingInfo!]!
}
