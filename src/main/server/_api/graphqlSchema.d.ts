/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Resources } from "../_models/misc/resources.js"
import { Hero } from "../_models/hero/hero.js"
import { BuildingInProgress } from "../_models/buildings/inProgress/buildingInProgress.js"
import { BuildingSpot } from "../_models/buildings/spots/buildingSpot.js"
import { TextLogEntryContent } from "../_models/logs/content/text.js"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AccountInput: { // input type
    password: string; // String!
    server: string; // String!
    username: string; // String!
  }
  AvailableNewBuildingsInput: { // input type
    fieldId: number; // Int!
    villageId: string; // ID!
  }
  ClearQueueInput: { // input type
    villageId: string; // ID!
  }
  CompleteTasksSettingsInput: { // input type
    allow: boolean; // Boolean!
    allowedTaskIds: string[]; // [String!]!
    taskIds: string[]; // [String!]!
  }
  CoolDownInput: { // input type
    max: NexusGenInputs['DurationInput']; // DurationInput!
    min: NexusGenInputs['DurationInput']; // DurationInput!
  }
  DequeueBuildingAtFieldInput: { // input type
    fieldId: number; // Int!
    targetLevel?: number | null; // Int
    villageId: string; // ID!
  }
  DequeueBuildingInput: { // input type
    queueId: string; // ID!
    villageId: string; // ID!
  }
  DualQueueSettingsInput: { // input type
    allow: boolean; // Boolean!
    preference: NexusGenEnums['DualQueuePreference']; // DualQueuePreference!
  }
  DurationInput: { // input type
    days: number; // Int!
    hours: number; // Int!
    minutes: number; // Int!
    seconds: number; // Int!
  }
  EnqueueBuildingInput: { // input type
    fieldId: number; // Int!
    targetLevel?: number | null; // Int
    type: number; // Int!
    villageId: string; // ID!
  }
  HeroLevelUpItemInput: { // input type
    defBonus: number; // Int!
    name: string; // ID!
    offBonus: number; // Int!
    offensiveStrength: number; // Int!
    resources: number; // Int!
  }
  SearchMapInput: { // input type
    cropBonus: number; // Int!
    origin: NexusGenInputs['SearchMapOriginInput']; // SearchMapOriginInput!
    types: string[]; // [String!]!
  }
  SearchMapOriginInput: { // input type
    radius: number; // Int!
    x: number; // Int!
    y: number; // Int!
  }
  TimestampInput: { // input type
    totalSeconds: number; // Int!
  }
  UpdateAccountSettingsInput: { // input type
    allowTasks: boolean; // Boolean!
    autoBuild: boolean; // Boolean!
    autoParty: boolean; // Boolean!
    autoStart: boolean; // Boolean!
    autoUnits: boolean; // Boolean!
    tasksCoolDown: NexusGenInputs['CoolDownInput']; // CoolDownInput!
  }
  UpdateAutoAdventureSettingsInput: { // input type
    adventureCriteria: NexusGenEnums['AdventureCriteria']; // AdventureCriteria!
    allow: boolean; // Boolean!
    coolDown: NexusGenInputs['CoolDownInput']; // CoolDownInput!
    hardMinHealth: number; // Int!
    maxTravelTime: NexusGenInputs['DurationInput']; // DurationInput!
    normalMinHealth: number; // Int!
    preferHard: boolean; // Boolean!
  }
  UpdateAutoBuildSettingsInput: { // input type
    allow: boolean; // Boolean!
    autoCropFields: boolean; // Boolean!
    autoStorage: NexusGenInputs['UpdateAutoStorageSettingsInput']; // UpdateAutoStorageSettingsInput!
    coolDown: NexusGenInputs['CoolDownInput']; // CoolDownInput!
    dualQueue: NexusGenInputs['DualQueueSettingsInput']; // DualQueueSettingsInput!
    minCrop: number; // Int!
    useHeroResources: boolean; // Boolean!
  }
  UpdateAutoMentorSettingsInput: { // input type
    acceptDailyRewards: boolean; // Boolean!
    acceptTaskRewards: boolean; // Boolean!
    completeTasks: NexusGenInputs['CompleteTasksSettingsInput']; // CompleteTasksSettingsInput!
  }
  UpdateAutoPartySettingsInput: { // input type
    allowLarge: boolean; // Boolean!
    allowSmall: boolean; // Boolean!
    coolDown: NexusGenInputs['CoolDownInput']; // CoolDownInput!
    minCulturePointsLarge: number; // Int!
    minCulturePointsSmall: number; // Int!
    useHeroResources: boolean; // Boolean!
  }
  UpdateAutoStorageOptionSettingsInput: { // input type
    allow: boolean; // Boolean!
    overflowLevel: number; // Int!
  }
  UpdateAutoStorageSettingsInput: { // input type
    allowFreeSpots: boolean; // Boolean!
    granary: NexusGenInputs['UpdateAutoStorageOptionSettingsInput']; // UpdateAutoStorageOptionSettingsInput!
    warehouse: NexusGenInputs['UpdateAutoStorageOptionSettingsInput']; // UpdateAutoStorageOptionSettingsInput!
  }
  UpdateAutoUnitsBuildingSettingsInput: { // input type
    allow: boolean; // Boolean!
    maxBuildTime: NexusGenInputs['DurationInput']; // DurationInput!
  }
  UpdateAutoUnitsSettingsInput: { // input type
    allow: boolean; // Boolean!
    coolDown: NexusGenInputs['CoolDownInput']; // CoolDownInput!
    minCrop: number; // Int!
    useHeroResources: boolean; // Boolean!
  }
  UpdateAutoUnitsUnitSettingsInput: { // input type
    autoBuild: boolean; // Boolean!
    index: number; // Int!
    targetAmount: number; // Int!
    trainForever: boolean; // Boolean!
  }
  UpdateGeneralSettingsInput: { // input type
    chromePath: string; // String!
    headlessChrome: boolean; // Boolean!
  }
  UpdateGeneralVillageSettingsInput: { // input type
    allowTasks: boolean; // Boolean!
  }
}

export interface NexusGenEnums {
  AdventureCriteria: "Closest" | "Furthest" | "Random"
  BotState: "None" | "Paused" | "Pending" | "Running" | "Stopping"
  ClaimHeroResourcesReason: "AutoBuild" | "AutoParty" | "AutoUnits"
  DualQueuePreference: "Infrastructure" | "Resources"
  HeroState: "Dead" | "InVillage" | "OnAdventure" | "Reviving" | "Unknown"
  MapSearchState: "None" | "Scanning" | "Searching"
  TaskType: "AutoAdventure" | "AutoBuild" | "AutoMentor" | "AutoParty" | "AutoUnits"
  TextLogEntryType: "Error" | "Info"
  Tribe: 6 | 3 | 7 | 5 | 4 | 1 | 2
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AccountSettings: { // root type
    allowTasks: boolean; // Boolean!
    autoBuild: boolean; // Boolean!
    autoParty: boolean; // Boolean!
    autoStart: boolean; // Boolean!
    autoUnits: boolean; // Boolean!
    tasksCoolDown: NexusGenRootTypes['CoolDown']; // CoolDown!
  }
  AutoAdventureSettings: { // root type
    adventureCriteria: NexusGenEnums['AdventureCriteria']; // AdventureCriteria!
    allow: boolean; // Boolean!
    coolDown: NexusGenRootTypes['CoolDown']; // CoolDown!
    hardMinHealth: number; // Int!
    maxTravelTime: NexusGenRootTypes['Duration']; // Duration!
    normalMinHealth: number; // Int!
    preferHard: boolean; // Boolean!
  }
  AutoBuildLogEntryContent: { // root type
    fieldId: number; // Int!
    level: number; // Int!
    name: string; // String!
    type: number; // Int!
  }
  AutoBuildSettings: { // root type
    allow: boolean; // Boolean!
    autoCropFields: boolean; // Boolean!
    autoStorage: NexusGenRootTypes['AutoStorageSettings']; // AutoStorageSettings!
    coolDown: NexusGenRootTypes['CoolDown']; // CoolDown!
    dualQueue: NexusGenRootTypes['DualQueueSettings']; // DualQueueSettings!
    minCrop: number; // Int!
    useHeroResources: boolean; // Boolean!
  }
  AutoMentorSettings: { // root type
    acceptDailyRewards: boolean; // Boolean!
    acceptTaskRewards: boolean; // Boolean!
    completeTasks: NexusGenRootTypes['CompleteTasksSettings']; // CompleteTasksSettings!
  }
  AutoPartySettings: { // root type
    allowLarge: boolean; // Boolean!
    allowSmall: boolean; // Boolean!
    coolDown: NexusGenRootTypes['CoolDown']; // CoolDown!
    minCulturePointsLarge: number; // Int!
    minCulturePointsSmall: number; // Int!
    useHeroResources: boolean; // Boolean!
  }
  AutoStorageOptionSettings: { // root type
    allow: boolean; // Boolean!
    overflowLevel: number; // Int!
  }
  AutoStorageSettings: { // root type
    allowFreeSpots: boolean; // Boolean!
    granary: NexusGenRootTypes['AutoStorageOptionSettings']; // AutoStorageOptionSettings!
    warehouse: NexusGenRootTypes['AutoStorageOptionSettings']; // AutoStorageOptionSettings!
  }
  AutoUnitsBuildingSettings: { // root type
    allow: boolean; // Boolean!
    maxBuildTime: NexusGenRootTypes['Duration']; // Duration!
    units: NexusGenRootTypes['AutoUnitsUnitSettings'][]; // [AutoUnitsUnitSettings!]!
  }
  AutoUnitsLogEntryContent: { // root type
    amount: number; // Int!
    index: number; // Int!
    tribe: NexusGenEnums['Tribe']; // Tribe!
    unitName: string; // String!
  }
  AutoUnitsSettings: { // root type
    allow: boolean; // Boolean!
    barracks: NexusGenRootTypes['AutoUnitsBuildingSettings']; // AutoUnitsBuildingSettings!
    coolDown: NexusGenRootTypes['CoolDown']; // CoolDown!
    minCrop: number; // Int!
    residence: NexusGenRootTypes['AutoUnitsBuildingSettings']; // AutoUnitsBuildingSettings!
    stable: NexusGenRootTypes['AutoUnitsBuildingSettings']; // AutoUnitsBuildingSettings!
    useHeroResources: boolean; // Boolean!
    workshop: NexusGenRootTypes['AutoUnitsBuildingSettings']; // AutoUnitsBuildingSettings!
  }
  AutoUnitsUnitSettings: { // root type
    autoBuild: boolean; // Boolean!
    index: number; // Int!
    targetAmount: number; // Int!
    trainForever: boolean; // Boolean!
  }
  BuildingInProgress: BuildingInProgress;
  BuildingInfo: { // root type
    maxLevel: number; // Int!
    name: string; // String!
  }
  BuildingLevelInfo: { // root type
    cost: NexusGenRootTypes['Resources']; // Resources!
  }
  BuildingQueue: { // root type
    buildingRanges: NexusGenRootTypes['QueuedBuildingRange'][]; // [QueuedBuildingRange!]!
    infrastructureBuildingTime: NexusGenRootTypes['Duration']; // Duration!
    resourcesBuildingTime: NexusGenRootTypes['Duration']; // Duration!
    totalBuildingTime: NexusGenRootTypes['Duration']; // Duration!
    totalCost: NexusGenRootTypes['Resources']; // Resources!
  }
  BuildingSpot: BuildingSpot;
  BuildingSpotLevel: { // root type
    actual: number; // Int!
    ongoing?: number | null; // Int
    queued?: number | null; // Int
    total: number; // Int!
  }
  BuildingSpots: { // root type
    infrastructure: NexusGenRootTypes['BuildingSpot'][]; // [BuildingSpot!]!
    resources: NexusGenRootTypes['ResourceFields']; // ResourceFields!
  }
  CompleteTasksSettings: { // root type
    allow: boolean; // Boolean!
    allowedTaskIds: string[]; // [String!]!
  }
  CoolDown: { // root type
    max: NexusGenRootTypes['Duration']; // Duration!
    min: NexusGenRootTypes['Duration']; // Duration!
  }
  Coords: { // root type
    x: number; // Int!
    y: number; // Int!
  }
  DualQueueSettings: { // root type
    allow: boolean; // Boolean!
    preference: NexusGenEnums['DualQueuePreference']; // DualQueuePreference!
  }
  Duration: { // root type
    days: number; // Int!
    hours: number; // Int!
    minutes: number; // Int!
    seconds: number; // Int!
  }
  GameInfo: { // root type
    tribe: NexusGenEnums['Tribe']; // Tribe!
  }
  GeneralSettings: { // root type
    chromePath: string; // String!
    headlessChrome: boolean; // Boolean!
  }
  GeneralVillageSettings: { // root type
    allowTasks: boolean; // Boolean!
  }
  HeroInformation: Hero;
  HeroLevelUpItem: { // root type
    defBonus: number; // Int!
    name: string; // ID!
    offBonus: number; // Int!
    offensiveStrength: number; // Int!
    resources: number; // Int!
  }
  HeroLevelUpSettings: { // root type
    levelUpItems: NexusGenRootTypes['HeroLevelUpItem'][]; // [HeroLevelUpItem!]!
  }
  LogEntry: { // root type
    content: NexusGenRootTypes['LogEntryContent']; // LogEntryContent!
    timestamp: NexusGenRootTypes['Timestamp']; // Timestamp!
    village?: NexusGenRootTypes['Village'] | null; // Village
  }
  Mutation: {};
  Query: {};
  QueuedBuilding: { // root type
    buildingTime: NexusGenRootTypes['Duration']; // Duration!
    fieldId: number; // Int!
    level: number; // Int!
    queueId: string; // ID!
    queueIndex: number; // Int!
    type: number; // Int!
  }
  QueuedBuildingRange: { // root type
    buildingTime: NexusGenRootTypes['Duration']; // Duration!
    buildings: NexusGenRootTypes['QueuedBuilding'][]; // [QueuedBuilding!]!
    cost: NexusGenRootTypes['Resources']; // Resources!
    fieldId: number; // Int!
    id: string; // String!
    type: number; // Int!
  }
  ResourceClaimLogEntryContent: { // root type
    reason: NexusGenEnums['ClaimHeroResourcesReason']; // ClaimHeroResourcesReason!
    resources: NexusGenRootTypes['Resources']; // Resources!
  }
  ResourceFields: { // root type
    clay: NexusGenRootTypes['BuildingSpot'][]; // [BuildingSpot!]!
    crop: NexusGenRootTypes['BuildingSpot'][]; // [BuildingSpot!]!
    iron: NexusGenRootTypes['BuildingSpot'][]; // [BuildingSpot!]!
    wood: NexusGenRootTypes['BuildingSpot'][]; // [BuildingSpot!]!
  }
  Resources: Resources;
  Subscription: {};
  TextLogEntryContent: TextLogEntryContent;
  Timestamp: { // root type
    totalSeconds: number; // Int!
  }
  UnitInfo: { // root type
    name: string; // String!
  }
  UserAccount: { // root type
    id: string; // ID!
    password: string; // String!
    server: string; // String!
    username: string; // String!
  }
  Village: { // root type
    coords: NexusGenRootTypes['Coords']; // Coords!
    id: string; // ID!
    isCapital: boolean; // Boolean!
    name: string; // String!
    resources: NexusGenRootTypes['VillageResources']; // VillageResources!
  }
  VillageCapacity: { // root type
    granary: number; // Int!
    warehouse: number; // Int!
  }
  VillageCrannyCapacity: { // root type
    actual: number; // Int!
    ongoing: number; // Int!
    total: number; // Int!
  }
  VillageResources: { // root type
    amount: NexusGenRootTypes['Resources']; // Resources!
    capacity: NexusGenRootTypes['VillageCapacity']; // VillageCapacity!
    production: NexusGenRootTypes['Resources']; // Resources!
  }
  VillageTile: { // root type
    claimed?: boolean | null; // Boolean
    coords: NexusGenRootTypes['Coords']; // Coords!
    cropBonus: number; // Int!
    distance: number; // Float!
    type: string; // String!
  }
}

export interface NexusGenInterfaces {
  Node: NexusGenRootTypes['UserAccount'];
}

export interface NexusGenUnions {
  LogEntryContent: NexusGenRootTypes['AutoBuildLogEntryContent'] | NexusGenRootTypes['AutoUnitsLogEntryContent'] | NexusGenRootTypes['ResourceClaimLogEntryContent'] | NexusGenRootTypes['TextLogEntryContent'];
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AccountSettings: { // field return type
    allowTasks: boolean; // Boolean!
    autoBuild: boolean; // Boolean!
    autoParty: boolean; // Boolean!
    autoStart: boolean; // Boolean!
    autoUnits: boolean; // Boolean!
    tasksCoolDown: NexusGenRootTypes['CoolDown']; // CoolDown!
  }
  AutoAdventureSettings: { // field return type
    adventureCriteria: NexusGenEnums['AdventureCriteria']; // AdventureCriteria!
    allow: boolean; // Boolean!
    coolDown: NexusGenRootTypes['CoolDown']; // CoolDown!
    hardMinHealth: number; // Int!
    maxTravelTime: NexusGenRootTypes['Duration']; // Duration!
    normalMinHealth: number; // Int!
    preferHard: boolean; // Boolean!
  }
  AutoBuildLogEntryContent: { // field return type
    fieldId: number; // Int!
    level: number; // Int!
    name: string; // String!
    type: number; // Int!
  }
  AutoBuildSettings: { // field return type
    allow: boolean; // Boolean!
    autoCropFields: boolean; // Boolean!
    autoStorage: NexusGenRootTypes['AutoStorageSettings']; // AutoStorageSettings!
    coolDown: NexusGenRootTypes['CoolDown']; // CoolDown!
    dualQueue: NexusGenRootTypes['DualQueueSettings']; // DualQueueSettings!
    minCrop: number; // Int!
    useHeroResources: boolean; // Boolean!
  }
  AutoMentorSettings: { // field return type
    acceptDailyRewards: boolean; // Boolean!
    acceptTaskRewards: boolean; // Boolean!
    completeTasks: NexusGenRootTypes['CompleteTasksSettings']; // CompleteTasksSettings!
  }
  AutoPartySettings: { // field return type
    allowLarge: boolean; // Boolean!
    allowSmall: boolean; // Boolean!
    coolDown: NexusGenRootTypes['CoolDown']; // CoolDown!
    minCulturePointsLarge: number; // Int!
    minCulturePointsSmall: number; // Int!
    useHeroResources: boolean; // Boolean!
  }
  AutoStorageOptionSettings: { // field return type
    allow: boolean; // Boolean!
    overflowLevel: number; // Int!
  }
  AutoStorageSettings: { // field return type
    allowFreeSpots: boolean; // Boolean!
    granary: NexusGenRootTypes['AutoStorageOptionSettings']; // AutoStorageOptionSettings!
    warehouse: NexusGenRootTypes['AutoStorageOptionSettings']; // AutoStorageOptionSettings!
  }
  AutoUnitsBuildingSettings: { // field return type
    allow: boolean; // Boolean!
    maxBuildTime: NexusGenRootTypes['Duration']; // Duration!
    units: NexusGenRootTypes['AutoUnitsUnitSettings'][]; // [AutoUnitsUnitSettings!]!
  }
  AutoUnitsLogEntryContent: { // field return type
    amount: number; // Int!
    index: number; // Int!
    tribe: NexusGenEnums['Tribe']; // Tribe!
    unitName: string; // String!
  }
  AutoUnitsSettings: { // field return type
    allow: boolean; // Boolean!
    barracks: NexusGenRootTypes['AutoUnitsBuildingSettings']; // AutoUnitsBuildingSettings!
    coolDown: NexusGenRootTypes['CoolDown']; // CoolDown!
    minCrop: number; // Int!
    residence: NexusGenRootTypes['AutoUnitsBuildingSettings']; // AutoUnitsBuildingSettings!
    stable: NexusGenRootTypes['AutoUnitsBuildingSettings']; // AutoUnitsBuildingSettings!
    useHeroResources: boolean; // Boolean!
    workshop: NexusGenRootTypes['AutoUnitsBuildingSettings']; // AutoUnitsBuildingSettings!
  }
  AutoUnitsUnitSettings: { // field return type
    autoBuild: boolean; // Boolean!
    index: number; // Int!
    targetAmount: number; // Int!
    trainForever: boolean; // Boolean!
  }
  BuildingInProgress: { // field return type
    fieldId: number; // Int!
    finishedAt: NexusGenRootTypes['Timestamp']; // Timestamp!
    level: number; // Int!
    type: number; // Int!
  }
  BuildingInfo: { // field return type
    maxLevel: number; // Int!
    name: string; // String!
  }
  BuildingLevelInfo: { // field return type
    cost: NexusGenRootTypes['Resources']; // Resources!
  }
  BuildingQueue: { // field return type
    buildingRanges: NexusGenRootTypes['QueuedBuildingRange'][]; // [QueuedBuildingRange!]!
    infrastructureBuildingTime: NexusGenRootTypes['Duration']; // Duration!
    resourcesBuildingTime: NexusGenRootTypes['Duration']; // Duration!
    totalBuildingTime: NexusGenRootTypes['Duration']; // Duration!
    totalCost: NexusGenRootTypes['Resources']; // Resources!
  }
  BuildingSpot: { // field return type
    fieldId: number; // Int!
    level: NexusGenRootTypes['BuildingSpotLevel']; // BuildingSpotLevel!
    type: number; // Int!
  }
  BuildingSpotLevel: { // field return type
    actual: number; // Int!
    ongoing: number | null; // Int
    queued: number | null; // Int
    total: number; // Int!
  }
  BuildingSpots: { // field return type
    infrastructure: NexusGenRootTypes['BuildingSpot'][]; // [BuildingSpot!]!
    resources: NexusGenRootTypes['ResourceFields']; // ResourceFields!
  }
  CompleteTasksSettings: { // field return type
    allow: boolean; // Boolean!
    allowedTaskIds: string[]; // [String!]!
    taskIds: string[]; // [String!]!
  }
  CoolDown: { // field return type
    max: NexusGenRootTypes['Duration']; // Duration!
    min: NexusGenRootTypes['Duration']; // Duration!
  }
  Coords: { // field return type
    x: number; // Int!
    y: number; // Int!
  }
  DualQueueSettings: { // field return type
    allow: boolean; // Boolean!
    preference: NexusGenEnums['DualQueuePreference']; // DualQueuePreference!
  }
  Duration: { // field return type
    days: number; // Int!
    hours: number; // Int!
    minutes: number; // Int!
    seconds: number; // Int!
  }
  GameInfo: { // field return type
    tribe: NexusGenEnums['Tribe']; // Tribe!
  }
  GeneralSettings: { // field return type
    chromePath: string; // String!
    headlessChrome: boolean; // Boolean!
  }
  GeneralVillageSettings: { // field return type
    allowTasks: boolean; // Boolean!
  }
  HeroInformation: { // field return type
    health: number; // Int!
    state: NexusGenEnums['HeroState']; // HeroState!
    village: NexusGenRootTypes['Village'] | null; // Village
  }
  HeroLevelUpItem: { // field return type
    defBonus: number; // Int!
    name: string; // ID!
    offBonus: number; // Int!
    offensiveStrength: number; // Int!
    resources: number; // Int!
  }
  HeroLevelUpSettings: { // field return type
    levelUpItems: NexusGenRootTypes['HeroLevelUpItem'][]; // [HeroLevelUpItem!]!
  }
  LogEntry: { // field return type
    content: NexusGenRootTypes['LogEntryContent']; // LogEntryContent!
    timestamp: NexusGenRootTypes['Timestamp']; // Timestamp!
    village: NexusGenRootTypes['Village'] | null; // Village
  }
  Mutation: { // field return type
    addHeroLevelUpItem: NexusGenRootTypes['HeroLevelUpItem']; // HeroLevelUpItem!
    clearQueue: boolean | null; // Boolean
    createAccount: NexusGenRootTypes['UserAccount']; // UserAccount!
    deleteAccount: NexusGenRootTypes['UserAccount']; // UserAccount!
    dequeueBuilding: boolean | null; // Boolean
    dequeueBuildingAtField: boolean | null; // Boolean
    dequeueBuildingsBlock: boolean | null; // Boolean
    enqueueBuilding: boolean | null; // Boolean
    exportAccountSettings: boolean | null; // Boolean
    exportAccounts: boolean | null; // Boolean
    exportGeneralSettings: boolean | null; // Boolean
    importAccountSettings: boolean | null; // Boolean
    importAccounts: boolean | null; // Boolean
    importGeneralSettings: boolean | null; // Boolean
    moveQueuedBuildingAsHighAsPossible: boolean | null; // Boolean
    moveQueuedBuildingToIndex: boolean | null; // Boolean
    moveQueuedBuildingsBlockAsHighAsPossible: boolean | null; // Boolean
    moveQueuedBuildingsBlockToIndex: boolean | null; // Boolean
    refreshVillage: boolean | null; // Boolean
    removeHeroLevelUpItem: NexusGenRootTypes['HeroLevelUpItem']; // HeroLevelUpItem!
    resetAccountSettings: NexusGenRootTypes['AccountSettings']; // AccountSettings!
    resetAutoAdventureSettings: NexusGenRootTypes['AutoAdventureSettings']; // AutoAdventureSettings!
    resetAutoBuildSettings: NexusGenRootTypes['AutoBuildSettings']; // AutoBuildSettings!
    resetAutoMentorSettings: NexusGenRootTypes['AutoMentorSettings']; // AutoMentorSettings!
    resetAutoPartySettings: NexusGenRootTypes['AutoPartySettings']; // AutoPartySettings!
    resetAutoUnitsSettings: NexusGenRootTypes['AutoUnitsSettings']; // AutoUnitsSettings!
    resetGeneralSettings: NexusGenRootTypes['GeneralSettings']; // GeneralSettings!
    resetGeneralVillageSettings: NexusGenRootTypes['GeneralVillageSettings']; // GeneralVillageSettings!
    resetNextTaskExecution: NexusGenRootTypes['Timestamp']; // Timestamp!
    resetNextTasksExecution: NexusGenRootTypes['Timestamp']; // Timestamp!
    resetNextVillageTaskExecution: NexusGenRootTypes['Timestamp']; // Timestamp!
    scanWholeMap: boolean | null; // Boolean
    searchMap: boolean | null; // Boolean
    setNextTaskExecution: NexusGenRootTypes['Timestamp']; // Timestamp!
    setNextTasksExecution: NexusGenRootTypes['Timestamp']; // Timestamp!
    setNextVillageTaskExecution: NexusGenRootTypes['Timestamp']; // Timestamp!
    signIn: boolean | null; // Boolean
    signOut: boolean | null; // Boolean
    startBot: boolean | null; // Boolean
    stopBot: boolean | null; // Boolean
    stopMapScan: boolean | null; // Boolean
    updateAccount: NexusGenRootTypes['UserAccount']; // UserAccount!
    updateAccountSettings: NexusGenRootTypes['AccountSettings']; // AccountSettings!
    updateAutoAdventureSettings: NexusGenRootTypes['AutoAdventureSettings']; // AutoAdventureSettings!
    updateAutoBuildSettings: NexusGenRootTypes['AutoBuildSettings']; // AutoBuildSettings!
    updateAutoMentorSettings: NexusGenRootTypes['AutoMentorSettings']; // AutoMentorSettings!
    updateAutoPartySettings: NexusGenRootTypes['AutoPartySettings']; // AutoPartySettings!
    updateAutoUnitsBuildingSettings: NexusGenRootTypes['AutoUnitsSettings']; // AutoUnitsSettings!
    updateAutoUnitsSettings: NexusGenRootTypes['AutoUnitsSettings']; // AutoUnitsSettings!
    updateAutoUnitsUnitSettings: NexusGenRootTypes['AutoUnitsSettings']; // AutoUnitsSettings!
    updateGeneralSettings: NexusGenRootTypes['GeneralSettings']; // GeneralSettings!
    updateGeneralVillageSettings: NexusGenRootTypes['GeneralVillageSettings']; // GeneralVillageSettings!
    updateHeroLevelUpItem: NexusGenRootTypes['HeroLevelUpItem']; // HeroLevelUpItem!
  }
  Query: { // field return type
    account: NexusGenRootTypes['UserAccount']; // UserAccount!
    accountSettings: NexusGenRootTypes['AccountSettings']; // AccountSettings!
    accounts: NexusGenRootTypes['UserAccount'][]; // [UserAccount!]!
    activeVillageId: string; // ID!
    autoAdventureSettings: NexusGenRootTypes['AutoAdventureSettings']; // AutoAdventureSettings!
    autoBuildSettings: NexusGenRootTypes['AutoBuildSettings']; // AutoBuildSettings!
    autoMentorSettings: NexusGenRootTypes['AutoMentorSettings']; // AutoMentorSettings!
    autoPartySettings: NexusGenRootTypes['AutoPartySettings']; // AutoPartySettings!
    autoUnitsSettings: NexusGenRootTypes['AutoUnitsSettings']; // AutoUnitsSettings!
    availableNewBuildingsTypes: number[]; // [Int!]!
    botState: NexusGenEnums['BotState']; // BotState!
    buildingInfo: NexusGenRootTypes['BuildingInfo']; // BuildingInfo!
    buildingLevelInfo: NexusGenRootTypes['BuildingLevelInfo']; // BuildingLevelInfo!
    buildingQueue: NexusGenRootTypes['BuildingQueue']; // BuildingQueue!
    buildingSpots: NexusGenRootTypes['BuildingSpots']; // BuildingSpots!
    buildingsInProgress: NexusGenRootTypes['BuildingInProgress'][]; // [BuildingInProgress!]!
    canMoveQueuedBuildingToIndex: boolean; // Boolean!
    canMoveQueuedBuildingsBlockToIndex: boolean; // Boolean!
    crannyCapacity: NexusGenRootTypes['VillageCrannyCapacity']; // VillageCrannyCapacity!
    currentAccount: NexusGenRootTypes['UserAccount']; // UserAccount!
    gameInfo: NexusGenRootTypes['GameInfo']; // GameInfo!
    generalSettings: NexusGenRootTypes['GeneralSettings']; // GeneralSettings!
    generalVillageSettings: NexusGenRootTypes['GeneralVillageSettings']; // GeneralVillageSettings!
    heroInformation: NexusGenRootTypes['HeroInformation']; // HeroInformation!
    heroLevelUpSettings: NexusGenRootTypes['HeroLevelUpSettings']; // HeroLevelUpSettings!
    isAccountTaken: boolean; // Boolean!
    isBotActive: boolean; // Boolean!
    isHeroLevelUpItemNameUsed: boolean; // Boolean!
    lastSignedAccountId: string | null; // String
    logEntries: NexusGenRootTypes['LogEntry'][]; // [LogEntry!]!
    mapScanProgress: number; // Float!
    mapSearchState: NexusGenEnums['MapSearchState']; // MapSearchState!
    nextTaskExecution: NexusGenRootTypes['Timestamp']; // Timestamp!
    nextTasksExecution: NexusGenRootTypes['Timestamp']; // Timestamp!
    nextVillageTaskExecution: NexusGenRootTypes['Timestamp']; // Timestamp!
    unitInfo: NexusGenRootTypes['UnitInfo']; // UnitInfo!
    village: NexusGenRootTypes['Village'] | null; // Village
    villageTileTypes: string[]; // [String!]!
    villages: NexusGenRootTypes['Village'][]; // [Village!]!
  }
  QueuedBuilding: { // field return type
    buildingTime: NexusGenRootTypes['Duration']; // Duration!
    fieldId: number; // Int!
    level: number; // Int!
    queueId: string; // ID!
    queueIndex: number; // Int!
    type: number; // Int!
  }
  QueuedBuildingRange: { // field return type
    buildingTime: NexusGenRootTypes['Duration']; // Duration!
    buildings: NexusGenRootTypes['QueuedBuilding'][]; // [QueuedBuilding!]!
    cost: NexusGenRootTypes['Resources']; // Resources!
    fieldId: number; // Int!
    id: string; // String!
    type: number; // Int!
  }
  ResourceClaimLogEntryContent: { // field return type
    reason: NexusGenEnums['ClaimHeroResourcesReason']; // ClaimHeroResourcesReason!
    resources: NexusGenRootTypes['Resources']; // Resources!
  }
  ResourceFields: { // field return type
    clay: NexusGenRootTypes['BuildingSpot'][]; // [BuildingSpot!]!
    crop: NexusGenRootTypes['BuildingSpot'][]; // [BuildingSpot!]!
    iron: NexusGenRootTypes['BuildingSpot'][]; // [BuildingSpot!]!
    wood: NexusGenRootTypes['BuildingSpot'][]; // [BuildingSpot!]!
  }
  Resources: { // field return type
    clay: number; // Int!
    crop: number; // Int!
    freeCrop: number; // Int!
    iron: number; // Int!
    total: number; // Int!
    wood: number; // Int!
  }
  Subscription: { // field return type
    accountSettingsUpdated: NexusGenRootTypes['AccountSettings']; // AccountSettings!
    accountsUpdated: NexusGenRootTypes['UserAccount'][]; // [UserAccount!]!
    activeVillageIdChanged: string; // ID!
    actualBuildingLevelsUpdated: boolean | null; // Boolean
    autoAdventureSettingsUpdated: NexusGenRootTypes['AutoAdventureSettings']; // AutoAdventureSettings!
    autoBuildSettingsUpdated: NexusGenRootTypes['AutoBuildSettings']; // AutoBuildSettings!
    autoMentorSettingsUpdated: NexusGenRootTypes['AutoMentorSettings']; // AutoMentorSettings!
    autoPartySettingsUpdated: NexusGenRootTypes['AutoPartySettings']; // AutoPartySettings!
    autoUnitsSettingsUpdated: NexusGenRootTypes['AutoUnitsSettings']; // AutoUnitsSettings!
    botActivityChanged: boolean; // Boolean!
    botStateChanged: NexusGenEnums['BotState']; // BotState!
    buildingsInProgressUpdated: NexusGenRootTypes['BuildingInProgress'][]; // [BuildingInProgress!]!
    generalSettingsUpdated: NexusGenRootTypes['GeneralSettings']; // GeneralSettings!
    generalVillageSettingsUpdated: NexusGenRootTypes['GeneralVillageSettings']; // GeneralVillageSettings!
    heroInformationUpdated: NexusGenRootTypes['HeroInformation']; // HeroInformation!
    heroLevelUpSettingsChanged: NexusGenRootTypes['HeroLevelUpSettings']; // HeroLevelUpSettings!
    lastSignedAccountIdUpdated: string | null; // String
    logEntryAdded: NexusGenRootTypes['LogEntry']; // LogEntry!
    mapScanProgressUpdated: number; // Float!
    mapSearchFinished: NexusGenRootTypes['VillageTile'][]; // [VillageTile!]!
    mapSearchStateChanged: NexusGenEnums['MapSearchState']; // MapSearchState!
    nextTaskExecutionChanged: NexusGenRootTypes['Timestamp']; // Timestamp!
    nextTasksExecutionChanged: NexusGenRootTypes['Timestamp']; // Timestamp!
    nextVillageTaskExecutionChanged: NexusGenRootTypes['Timestamp']; // Timestamp!
    queueUpdated: NexusGenRootTypes['BuildingQueue']; // BuildingQueue!
    villageUpdated: NexusGenRootTypes['Village']; // Village!
    villagesUpdated: NexusGenRootTypes['Village'][]; // [Village!]!
  }
  TextLogEntryContent: { // field return type
    message: string; // String!
    messageType: NexusGenEnums['TextLogEntryType']; // TextLogEntryType!
  }
  Timestamp: { // field return type
    totalSeconds: number; // Int!
  }
  UnitInfo: { // field return type
    name: string; // String!
  }
  UserAccount: { // field return type
    id: string; // ID!
    password: string; // String!
    server: string; // String!
    username: string; // String!
  }
  Village: { // field return type
    coords: NexusGenRootTypes['Coords']; // Coords!
    id: string; // ID!
    isCapital: boolean; // Boolean!
    name: string; // String!
    resources: NexusGenRootTypes['VillageResources']; // VillageResources!
  }
  VillageCapacity: { // field return type
    granary: number; // Int!
    warehouse: number; // Int!
  }
  VillageCrannyCapacity: { // field return type
    actual: number; // Int!
    ongoing: number; // Int!
    total: number; // Int!
  }
  VillageResources: { // field return type
    amount: NexusGenRootTypes['Resources']; // Resources!
    capacity: NexusGenRootTypes['VillageCapacity']; // VillageCapacity!
    production: NexusGenRootTypes['Resources']; // Resources!
  }
  VillageTile: { // field return type
    claimed: boolean | null; // Boolean
    coords: NexusGenRootTypes['Coords']; // Coords!
    cropBonus: number; // Int!
    distance: number; // Float!
    type: string; // String!
  }
  Node: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenFieldTypeNames {
  AccountSettings: { // field return type name
    allowTasks: 'Boolean'
    autoBuild: 'Boolean'
    autoParty: 'Boolean'
    autoStart: 'Boolean'
    autoUnits: 'Boolean'
    tasksCoolDown: 'CoolDown'
  }
  AutoAdventureSettings: { // field return type name
    adventureCriteria: 'AdventureCriteria'
    allow: 'Boolean'
    coolDown: 'CoolDown'
    hardMinHealth: 'Int'
    maxTravelTime: 'Duration'
    normalMinHealth: 'Int'
    preferHard: 'Boolean'
  }
  AutoBuildLogEntryContent: { // field return type name
    fieldId: 'Int'
    level: 'Int'
    name: 'String'
    type: 'Int'
  }
  AutoBuildSettings: { // field return type name
    allow: 'Boolean'
    autoCropFields: 'Boolean'
    autoStorage: 'AutoStorageSettings'
    coolDown: 'CoolDown'
    dualQueue: 'DualQueueSettings'
    minCrop: 'Int'
    useHeroResources: 'Boolean'
  }
  AutoMentorSettings: { // field return type name
    acceptDailyRewards: 'Boolean'
    acceptTaskRewards: 'Boolean'
    completeTasks: 'CompleteTasksSettings'
  }
  AutoPartySettings: { // field return type name
    allowLarge: 'Boolean'
    allowSmall: 'Boolean'
    coolDown: 'CoolDown'
    minCulturePointsLarge: 'Int'
    minCulturePointsSmall: 'Int'
    useHeroResources: 'Boolean'
  }
  AutoStorageOptionSettings: { // field return type name
    allow: 'Boolean'
    overflowLevel: 'Int'
  }
  AutoStorageSettings: { // field return type name
    allowFreeSpots: 'Boolean'
    granary: 'AutoStorageOptionSettings'
    warehouse: 'AutoStorageOptionSettings'
  }
  AutoUnitsBuildingSettings: { // field return type name
    allow: 'Boolean'
    maxBuildTime: 'Duration'
    units: 'AutoUnitsUnitSettings'
  }
  AutoUnitsLogEntryContent: { // field return type name
    amount: 'Int'
    index: 'Int'
    tribe: 'Tribe'
    unitName: 'String'
  }
  AutoUnitsSettings: { // field return type name
    allow: 'Boolean'
    barracks: 'AutoUnitsBuildingSettings'
    coolDown: 'CoolDown'
    minCrop: 'Int'
    residence: 'AutoUnitsBuildingSettings'
    stable: 'AutoUnitsBuildingSettings'
    useHeroResources: 'Boolean'
    workshop: 'AutoUnitsBuildingSettings'
  }
  AutoUnitsUnitSettings: { // field return type name
    autoBuild: 'Boolean'
    index: 'Int'
    targetAmount: 'Int'
    trainForever: 'Boolean'
  }
  BuildingInProgress: { // field return type name
    fieldId: 'Int'
    finishedAt: 'Timestamp'
    level: 'Int'
    type: 'Int'
  }
  BuildingInfo: { // field return type name
    maxLevel: 'Int'
    name: 'String'
  }
  BuildingLevelInfo: { // field return type name
    cost: 'Resources'
  }
  BuildingQueue: { // field return type name
    buildingRanges: 'QueuedBuildingRange'
    infrastructureBuildingTime: 'Duration'
    resourcesBuildingTime: 'Duration'
    totalBuildingTime: 'Duration'
    totalCost: 'Resources'
  }
  BuildingSpot: { // field return type name
    fieldId: 'Int'
    level: 'BuildingSpotLevel'
    type: 'Int'
  }
  BuildingSpotLevel: { // field return type name
    actual: 'Int'
    ongoing: 'Int'
    queued: 'Int'
    total: 'Int'
  }
  BuildingSpots: { // field return type name
    infrastructure: 'BuildingSpot'
    resources: 'ResourceFields'
  }
  CompleteTasksSettings: { // field return type name
    allow: 'Boolean'
    allowedTaskIds: 'String'
    taskIds: 'String'
  }
  CoolDown: { // field return type name
    max: 'Duration'
    min: 'Duration'
  }
  Coords: { // field return type name
    x: 'Int'
    y: 'Int'
  }
  DualQueueSettings: { // field return type name
    allow: 'Boolean'
    preference: 'DualQueuePreference'
  }
  Duration: { // field return type name
    days: 'Int'
    hours: 'Int'
    minutes: 'Int'
    seconds: 'Int'
  }
  GameInfo: { // field return type name
    tribe: 'Tribe'
  }
  GeneralSettings: { // field return type name
    chromePath: 'String'
    headlessChrome: 'Boolean'
  }
  GeneralVillageSettings: { // field return type name
    allowTasks: 'Boolean'
  }
  HeroInformation: { // field return type name
    health: 'Int'
    state: 'HeroState'
    village: 'Village'
  }
  HeroLevelUpItem: { // field return type name
    defBonus: 'Int'
    name: 'ID'
    offBonus: 'Int'
    offensiveStrength: 'Int'
    resources: 'Int'
  }
  HeroLevelUpSettings: { // field return type name
    levelUpItems: 'HeroLevelUpItem'
  }
  LogEntry: { // field return type name
    content: 'LogEntryContent'
    timestamp: 'Timestamp'
    village: 'Village'
  }
  Mutation: { // field return type name
    addHeroLevelUpItem: 'HeroLevelUpItem'
    clearQueue: 'Boolean'
    createAccount: 'UserAccount'
    deleteAccount: 'UserAccount'
    dequeueBuilding: 'Boolean'
    dequeueBuildingAtField: 'Boolean'
    dequeueBuildingsBlock: 'Boolean'
    enqueueBuilding: 'Boolean'
    exportAccountSettings: 'Boolean'
    exportAccounts: 'Boolean'
    exportGeneralSettings: 'Boolean'
    importAccountSettings: 'Boolean'
    importAccounts: 'Boolean'
    importGeneralSettings: 'Boolean'
    moveQueuedBuildingAsHighAsPossible: 'Boolean'
    moveQueuedBuildingToIndex: 'Boolean'
    moveQueuedBuildingsBlockAsHighAsPossible: 'Boolean'
    moveQueuedBuildingsBlockToIndex: 'Boolean'
    refreshVillage: 'Boolean'
    removeHeroLevelUpItem: 'HeroLevelUpItem'
    resetAccountSettings: 'AccountSettings'
    resetAutoAdventureSettings: 'AutoAdventureSettings'
    resetAutoBuildSettings: 'AutoBuildSettings'
    resetAutoMentorSettings: 'AutoMentorSettings'
    resetAutoPartySettings: 'AutoPartySettings'
    resetAutoUnitsSettings: 'AutoUnitsSettings'
    resetGeneralSettings: 'GeneralSettings'
    resetGeneralVillageSettings: 'GeneralVillageSettings'
    resetNextTaskExecution: 'Timestamp'
    resetNextTasksExecution: 'Timestamp'
    resetNextVillageTaskExecution: 'Timestamp'
    scanWholeMap: 'Boolean'
    searchMap: 'Boolean'
    setNextTaskExecution: 'Timestamp'
    setNextTasksExecution: 'Timestamp'
    setNextVillageTaskExecution: 'Timestamp'
    signIn: 'Boolean'
    signOut: 'Boolean'
    startBot: 'Boolean'
    stopBot: 'Boolean'
    stopMapScan: 'Boolean'
    updateAccount: 'UserAccount'
    updateAccountSettings: 'AccountSettings'
    updateAutoAdventureSettings: 'AutoAdventureSettings'
    updateAutoBuildSettings: 'AutoBuildSettings'
    updateAutoMentorSettings: 'AutoMentorSettings'
    updateAutoPartySettings: 'AutoPartySettings'
    updateAutoUnitsBuildingSettings: 'AutoUnitsSettings'
    updateAutoUnitsSettings: 'AutoUnitsSettings'
    updateAutoUnitsUnitSettings: 'AutoUnitsSettings'
    updateGeneralSettings: 'GeneralSettings'
    updateGeneralVillageSettings: 'GeneralVillageSettings'
    updateHeroLevelUpItem: 'HeroLevelUpItem'
  }
  Query: { // field return type name
    account: 'UserAccount'
    accountSettings: 'AccountSettings'
    accounts: 'UserAccount'
    activeVillageId: 'ID'
    autoAdventureSettings: 'AutoAdventureSettings'
    autoBuildSettings: 'AutoBuildSettings'
    autoMentorSettings: 'AutoMentorSettings'
    autoPartySettings: 'AutoPartySettings'
    autoUnitsSettings: 'AutoUnitsSettings'
    availableNewBuildingsTypes: 'Int'
    botState: 'BotState'
    buildingInfo: 'BuildingInfo'
    buildingLevelInfo: 'BuildingLevelInfo'
    buildingQueue: 'BuildingQueue'
    buildingSpots: 'BuildingSpots'
    buildingsInProgress: 'BuildingInProgress'
    canMoveQueuedBuildingToIndex: 'Boolean'
    canMoveQueuedBuildingsBlockToIndex: 'Boolean'
    crannyCapacity: 'VillageCrannyCapacity'
    currentAccount: 'UserAccount'
    gameInfo: 'GameInfo'
    generalSettings: 'GeneralSettings'
    generalVillageSettings: 'GeneralVillageSettings'
    heroInformation: 'HeroInformation'
    heroLevelUpSettings: 'HeroLevelUpSettings'
    isAccountTaken: 'Boolean'
    isBotActive: 'Boolean'
    isHeroLevelUpItemNameUsed: 'Boolean'
    lastSignedAccountId: 'String'
    logEntries: 'LogEntry'
    mapScanProgress: 'Float'
    mapSearchState: 'MapSearchState'
    nextTaskExecution: 'Timestamp'
    nextTasksExecution: 'Timestamp'
    nextVillageTaskExecution: 'Timestamp'
    unitInfo: 'UnitInfo'
    village: 'Village'
    villageTileTypes: 'String'
    villages: 'Village'
  }
  QueuedBuilding: { // field return type name
    buildingTime: 'Duration'
    fieldId: 'Int'
    level: 'Int'
    queueId: 'ID'
    queueIndex: 'Int'
    type: 'Int'
  }
  QueuedBuildingRange: { // field return type name
    buildingTime: 'Duration'
    buildings: 'QueuedBuilding'
    cost: 'Resources'
    fieldId: 'Int'
    id: 'String'
    type: 'Int'
  }
  ResourceClaimLogEntryContent: { // field return type name
    reason: 'ClaimHeroResourcesReason'
    resources: 'Resources'
  }
  ResourceFields: { // field return type name
    clay: 'BuildingSpot'
    crop: 'BuildingSpot'
    iron: 'BuildingSpot'
    wood: 'BuildingSpot'
  }
  Resources: { // field return type name
    clay: 'Int'
    crop: 'Int'
    freeCrop: 'Int'
    iron: 'Int'
    total: 'Int'
    wood: 'Int'
  }
  Subscription: { // field return type name
    accountSettingsUpdated: 'AccountSettings'
    accountsUpdated: 'UserAccount'
    activeVillageIdChanged: 'ID'
    actualBuildingLevelsUpdated: 'Boolean'
    autoAdventureSettingsUpdated: 'AutoAdventureSettings'
    autoBuildSettingsUpdated: 'AutoBuildSettings'
    autoMentorSettingsUpdated: 'AutoMentorSettings'
    autoPartySettingsUpdated: 'AutoPartySettings'
    autoUnitsSettingsUpdated: 'AutoUnitsSettings'
    botActivityChanged: 'Boolean'
    botStateChanged: 'BotState'
    buildingsInProgressUpdated: 'BuildingInProgress'
    generalSettingsUpdated: 'GeneralSettings'
    generalVillageSettingsUpdated: 'GeneralVillageSettings'
    heroInformationUpdated: 'HeroInformation'
    heroLevelUpSettingsChanged: 'HeroLevelUpSettings'
    lastSignedAccountIdUpdated: 'String'
    logEntryAdded: 'LogEntry'
    mapScanProgressUpdated: 'Float'
    mapSearchFinished: 'VillageTile'
    mapSearchStateChanged: 'MapSearchState'
    nextTaskExecutionChanged: 'Timestamp'
    nextTasksExecutionChanged: 'Timestamp'
    nextVillageTaskExecutionChanged: 'Timestamp'
    queueUpdated: 'BuildingQueue'
    villageUpdated: 'Village'
    villagesUpdated: 'Village'
  }
  TextLogEntryContent: { // field return type name
    message: 'String'
    messageType: 'TextLogEntryType'
  }
  Timestamp: { // field return type name
    totalSeconds: 'Int'
  }
  UnitInfo: { // field return type name
    name: 'String'
  }
  UserAccount: { // field return type name
    id: 'ID'
    password: 'String'
    server: 'String'
    username: 'String'
  }
  Village: { // field return type name
    coords: 'Coords'
    id: 'ID'
    isCapital: 'Boolean'
    name: 'String'
    resources: 'VillageResources'
  }
  VillageCapacity: { // field return type name
    granary: 'Int'
    warehouse: 'Int'
  }
  VillageCrannyCapacity: { // field return type name
    actual: 'Int'
    ongoing: 'Int'
    total: 'Int'
  }
  VillageResources: { // field return type name
    amount: 'Resources'
    capacity: 'VillageCapacity'
    production: 'Resources'
  }
  VillageTile: { // field return type name
    claimed: 'Boolean'
    coords: 'Coords'
    cropBonus: 'Int'
    distance: 'Float'
    type: 'String'
  }
  Node: { // field return type name
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addHeroLevelUpItem: { // args
      item: NexusGenInputs['HeroLevelUpItemInput']; // HeroLevelUpItemInput!
    }
    clearQueue: { // args
      villageId: string; // ID!
    }
    createAccount: { // args
      account: NexusGenInputs['AccountInput']; // AccountInput!
    }
    deleteAccount: { // args
      id: string; // ID!
    }
    dequeueBuilding: { // args
      input: NexusGenInputs['DequeueBuildingInput']; // DequeueBuildingInput!
    }
    dequeueBuildingAtField: { // args
      input: NexusGenInputs['DequeueBuildingAtFieldInput']; // DequeueBuildingAtFieldInput!
    }
    dequeueBuildingsBlock: { // args
      bottomBuildingQueueId: string; // ID!
      topBuildingQueueId: string; // ID!
      villageId: string; // ID!
    }
    enqueueBuilding: { // args
      input: NexusGenInputs['EnqueueBuildingInput']; // EnqueueBuildingInput!
    }
    exportAccountSettings: { // args
      accountId: string; // ID!
      path: string; // String!
    }
    exportAccounts: { // args
      path: string; // String!
    }
    exportGeneralSettings: { // args
      path: string; // String!
    }
    importAccountSettings: { // args
      accountId: string; // ID!
      path: string; // String!
    }
    importAccounts: { // args
      path: string; // String!
    }
    importGeneralSettings: { // args
      path: string; // String!
    }
    moveQueuedBuildingAsHighAsPossible: { // args
      queueId: string; // ID!
      villageId: string; // ID!
    }
    moveQueuedBuildingToIndex: { // args
      index: number; // Int!
      queueId: string; // ID!
      villageId: string; // ID!
    }
    moveQueuedBuildingsBlockAsHighAsPossible: { // args
      bottomBuildingQueueId: string; // ID!
      topBuildingQueueId: string; // ID!
      villageId: string; // ID!
    }
    moveQueuedBuildingsBlockToIndex: { // args
      bottomBuildingQueueId: string; // ID!
      index: number; // Int!
      topBuildingQueueId: string; // ID!
      villageId: string; // ID!
    }
    refreshVillage: { // args
      villageId: string; // ID!
    }
    removeHeroLevelUpItem: { // args
      name: string; // ID!
    }
    resetAutoBuildSettings: { // args
      villageId: string; // ID!
    }
    resetAutoPartySettings: { // args
      villageId: string; // ID!
    }
    resetAutoUnitsSettings: { // args
      villageId: string; // ID!
    }
    resetGeneralVillageSettings: { // args
      villageId: string; // ID!
    }
    resetNextTaskExecution: { // args
      task: NexusGenEnums['TaskType']; // TaskType!
    }
    resetNextVillageTaskExecution: { // args
      task: NexusGenEnums['TaskType']; // TaskType!
      villageId: string; // ID!
    }
    searchMap: { // args
      input: NexusGenInputs['SearchMapInput']; // SearchMapInput!
    }
    setNextTaskExecution: { // args
      delay: NexusGenInputs['DurationInput']; // DurationInput!
      task: NexusGenEnums['TaskType']; // TaskType!
    }
    setNextTasksExecution: { // args
      delay: NexusGenInputs['DurationInput']; // DurationInput!
    }
    setNextVillageTaskExecution: { // args
      delay: NexusGenInputs['DurationInput']; // DurationInput!
      task: NexusGenEnums['TaskType']; // TaskType!
      villageId: string; // ID!
    }
    signIn: { // args
      accountId: string; // ID!
    }
    updateAccount: { // args
      account: NexusGenInputs['AccountInput']; // AccountInput!
      id: string; // ID!
    }
    updateAccountSettings: { // args
      settings: NexusGenInputs['UpdateAccountSettingsInput']; // UpdateAccountSettingsInput!
    }
    updateAutoAdventureSettings: { // args
      settings: NexusGenInputs['UpdateAutoAdventureSettingsInput']; // UpdateAutoAdventureSettingsInput!
    }
    updateAutoBuildSettings: { // args
      settings: NexusGenInputs['UpdateAutoBuildSettingsInput']; // UpdateAutoBuildSettingsInput!
      villageId: string; // ID!
    }
    updateAutoMentorSettings: { // args
      settings: NexusGenInputs['UpdateAutoMentorSettingsInput']; // UpdateAutoMentorSettingsInput!
    }
    updateAutoPartySettings: { // args
      settings: NexusGenInputs['UpdateAutoPartySettingsInput']; // UpdateAutoPartySettingsInput!
      villageId: string; // ID!
    }
    updateAutoUnitsBuildingSettings: { // args
      buildingType: number; // Int!
      settings: NexusGenInputs['UpdateAutoUnitsBuildingSettingsInput']; // UpdateAutoUnitsBuildingSettingsInput!
      villageId: string; // ID!
    }
    updateAutoUnitsSettings: { // args
      settings: NexusGenInputs['UpdateAutoUnitsSettingsInput']; // UpdateAutoUnitsSettingsInput!
      villageId: string; // ID!
    }
    updateAutoUnitsUnitSettings: { // args
      settings: NexusGenInputs['UpdateAutoUnitsUnitSettingsInput']; // UpdateAutoUnitsUnitSettingsInput!
      villageId: string; // ID!
    }
    updateGeneralSettings: { // args
      settings: NexusGenInputs['UpdateGeneralSettingsInput']; // UpdateGeneralSettingsInput!
    }
    updateGeneralVillageSettings: { // args
      settings: NexusGenInputs['UpdateGeneralVillageSettingsInput']; // UpdateGeneralVillageSettingsInput!
      villageId: string; // ID!
    }
    updateHeroLevelUpItem: { // args
      item: NexusGenInputs['HeroLevelUpItemInput']; // HeroLevelUpItemInput!
      previousName: string; // ID!
    }
  }
  Query: {
    account: { // args
      id: string; // ID!
    }
    autoBuildSettings: { // args
      villageId: string; // ID!
    }
    autoPartySettings: { // args
      villageId: string; // ID!
    }
    autoUnitsSettings: { // args
      villageId: string; // ID!
    }
    availableNewBuildingsTypes: { // args
      input: NexusGenInputs['AvailableNewBuildingsInput']; // AvailableNewBuildingsInput!
    }
    buildingInfo: { // args
      buildingType: number; // Int!
    }
    buildingLevelInfo: { // args
      buildingType: number; // Int!
      level: number; // Int!
    }
    buildingQueue: { // args
      villageId: string; // ID!
    }
    buildingSpots: { // args
      villageId: string; // ID!
    }
    buildingsInProgress: { // args
      villageId: string; // ID!
    }
    canMoveQueuedBuildingToIndex: { // args
      index: number; // Int!
      queueId: string; // ID!
      villageId: string; // ID!
    }
    canMoveQueuedBuildingsBlockToIndex: { // args
      bottomBuildingQueueId: string; // ID!
      index: number; // Int!
      topBuildingQueueId: string; // ID!
      villageId: string; // ID!
    }
    crannyCapacity: { // args
      villageId: string; // ID!
    }
    generalVillageSettings: { // args
      villageId: string; // ID!
    }
    isAccountTaken: { // args
      account: NexusGenInputs['AccountInput']; // AccountInput!
    }
    isHeroLevelUpItemNameUsed: { // args
      name: string; // ID!
    }
    nextTaskExecution: { // args
      task: NexusGenEnums['TaskType']; // TaskType!
    }
    nextVillageTaskExecution: { // args
      task: NexusGenEnums['TaskType']; // TaskType!
      villageId: string; // ID!
    }
    unitInfo: { // args
      index: number; // Int!
    }
    village: { // args
      villageId: string; // ID!
    }
  }
  Subscription: {
    actualBuildingLevelsUpdated: { // args
      villageId: string; // ID!
    }
    autoBuildSettingsUpdated: { // args
      villageId: string; // ID!
    }
    autoPartySettingsUpdated: { // args
      villageId: string; // ID!
    }
    autoUnitsSettingsUpdated: { // args
      villageId: string; // ID!
    }
    buildingsInProgressUpdated: { // args
      villageId: string; // ID!
    }
    generalVillageSettingsUpdated: { // args
      villageId: string; // ID!
    }
    nextTaskExecutionChanged: { // args
      task: NexusGenEnums['TaskType']; // TaskType!
    }
    nextVillageTaskExecutionChanged: { // args
      task: NexusGenEnums['TaskType']; // TaskType!
      villageId: string; // ID!
    }
    queueUpdated: { // args
      villageId: string; // ID!
    }
    villageUpdated: { // args
      villageId: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  LogEntryContent: "AutoBuildLogEntryContent" | "AutoUnitsLogEntryContent" | "ResourceClaimLogEntryContent" | "TextLogEntryContent"
  Node: "UserAccount"
}

export interface NexusGenTypeInterfaces {
  UserAccount: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "LogEntryContent" | "Node";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    isTypeOf: false
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}