interface ITaskSettings {
    allow: Boolean!
    coolDown: CoolDown!
}

type GeneralSettings {
    allowTasks: Boolean!
    autoBuild: Boolean!
    autoUnits: Boolean!
}

type GeneralVillageSettings {
    allowTasks: Boolean!
}

type AutoBuildSettings implements ITaskSettings {
    allow: Boolean!
    coolDown: CoolDown!

    autoCropFields: Boolean!
    minCrop: Int!
}

type AutoAdventureSettings implements ITaskSettings {
    allow: Boolean!
    coolDown: CoolDown!

    adventureCriteria: Int!
    preferHard: Boolean!
    normalMinHealth: Int!
    hardMinHealth: Int!
    maxTravelTime: Duration!
    preferredVillageId: Int
}

type HeroSettings {
    autoAdventure: AutoAdventureSettings!
}

type AutoUnitsUnitSettings {
    index: Int!
    autoBuild: Boolean!
    trainForever: Boolean!
    targetAmount: Int!
}

type AutoUnitsBuildingSettings {
    allow: Boolean!
    maxBuildTime: Duration!
    units: [AutoUnitsUnitSettings!]!
}

type AutoUnitsSettings implements ITaskSettings {
    allow: Boolean!
    coolDown: CoolDown!

    minCrop: Int!
    barracks: AutoUnitsBuildingSettings!
    stable: AutoUnitsBuildingSettings!
    workshop: AutoUnitsBuildingSettings!
    residence: AutoUnitsBuildingSettings!
}

type VillageSettings {
    general: GeneralVillageSettings!
    autoBuild: AutoBuildSettings!
    autoUnits: AutoUnitsSettings!
}

extend type Query {
    generalSettings: GeneralSettings!
    hero: HeroSettings!
    villageSettings(villageId: Int!): VillageSettings!
    autoUnitsSettings(villageId: Int!): AutoUnitsSettings!
}

input GeneralVillageSettingsInput {
    allowTasks: Boolean!
}

input AutoBuildVillageSettingsInput {
    allow: Boolean!
    coolDown: CoolDownInput!

    autoCropFields: Boolean!
    minCrop: Int!
}

input AutoAdventureSettingsInput {
    allow: Boolean!
    coolDown: CoolDownInput!

    adventureCriteria: Int!
    preferHard: Boolean!
    normalMinHealth: Int!
    hardMinHealth: Int!
    maxTravelTime: DurationInput!
    preferredVillageId: Int
}

input GeneralSettingsInput {
    allowTasks: Boolean!
    autoBuild: Boolean!
    autoUnits: Boolean!
}

input UpdateAutoBuildVillageSettingsInput {
    villageId: Int!
    settings: AutoBuildVillageSettingsInput!
}

input UpdateAutoUnitsUnitSettingsInput {
    villageId: Int!
    unitIndex: Int!
    autoBuild: Boolean!
    trainForever: Boolean!
    targetAmount: Int!
}

input UpdateAutoUnitsBuildingSettingsInput {
    villageId: Int!
    buildingType: Int!
    allow: Boolean!
    maxBuildTime: DurationInput!
}

input UpdateAutoUnitsSettingsInput {
    villageId: Int!

    allow: Boolean!
    coolDown: CoolDownInput!

    minCrop: Int!
}

input UpdateGeneralVillageSettingsInput {
    villageId: Int!
    settings: GeneralVillageSettingsInput!
}

input UpdateGeneralSettingsInput {
    settings: GeneralSettingsInput!
}

input UpdateAutoAdventureSettingsInput {
    settings: AutoAdventureSettingsInput!
}

extend type Mutation {
    updateGeneralSettings(input: UpdateGeneralSettingsInput!): Boolean!
    updateAutoAdventureSettings(input: UpdateAutoAdventureSettingsInput!): Boolean!
    updateGeneralVillageSettings(input: UpdateGeneralVillageSettingsInput!): Boolean!
    updateAutoBuildVillageSettings(input: UpdateAutoBuildVillageSettingsInput!): Boolean!
    updateAutoUnitsUnitSettings(input: UpdateAutoUnitsUnitSettingsInput!): Boolean!
    updateAutoUnitsBuildingSettings(input: UpdateAutoUnitsBuildingSettingsInput!): Boolean!
    updateAutoUnitsSettings(input: UpdateAutoUnitsSettingsInput!): Boolean!
}
