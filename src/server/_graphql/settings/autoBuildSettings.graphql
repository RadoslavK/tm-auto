type AutoStorageOptionSettings {
  allow: Boolean!
  overflowLevel: Int!
}

input UpdateAutoStorageOptionSettingsInput {
  allow: Boolean!
  overflowLevel: Int!
}

type AutoStorageSettings {
  allowFreeSpots: Boolean!
  granary: AutoStorageOptionSettings!
  warehouse: AutoStorageOptionSettings!
}

input UpdateAutoStorageSettingsInput {
  allowFreeSpots: Boolean!
  granary: UpdateAutoStorageOptionSettingsInput!
  warehouse: UpdateAutoStorageOptionSettingsInput!
}

enum DualQueuePreference {
  Resources
  Infrastructure
}

type DualQueueSettings {
  allow: Boolean!
  preference: DualQueuePreference!
}

input DualQueueSettingsInput {
  allow: Boolean!
  preference: DualQueuePreference!
}

type AutoBuildSettings {
  allow: Boolean!
  coolDown: CoolDown!
  autoCropFields: Boolean!
  minCrop: Int!
  useHeroResources: Boolean!
  dualQueue: DualQueueSettings!

  autoStorage: AutoStorageSettings!
}

input UpdateAutoBuildSettingsInput {
  allow: Boolean!
  coolDown: CoolDownInput!
  autoCropFields: Boolean!
  minCrop: Int!
  useHeroResources: Boolean!
  dualQueue: DualQueueSettingsInput!

  autoStorage: UpdateAutoStorageSettingsInput!
}

extend type Query {
  autoBuildSettings(villageId: ID!): AutoBuildSettings!
}

extend type Mutation {
  updateAutoBuildSettings(
    villageId: ID!
    settings: UpdateAutoBuildSettingsInput!
  ): AutoBuildSettings!
  resetAutoBuildSettings(villageId: ID!): AutoBuildSettings!
}

extend type Subscription {
  autoBuildSettingsUpdated(villageId: ID!): AutoBuildSettings!
}
