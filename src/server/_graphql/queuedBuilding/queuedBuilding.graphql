type QueuedBuilding {
    level: Int!
    name: String!
    type: Int!
    queueId: String!
    queueIndex: Int!
    cost: Cost!
    fieldId: Int!
}

type QueuedBuildingRange {
    id: String!
    buildings: [QueuedBuilding!]!
    type: Int!
    name: String!
    fieldId: Int!
    cost: Cost!
}

type BuildingQueue {
    buildingRanges: [QueuedBuildingRange!]!
    totalCost: Cost!
}

extend type Query {
    buildingQueue(villageId: Int!): BuildingQueue!
    canMoveQueuedBuildingToIndex(villageId: Int!, queueId: String!, index: Int!): Boolean!
    canMoveQueuedBuildingsBlockToIndex(villageId: Int!, topBuildingQueueId: String!, bottomBuildingQueueId: String!, index: Int!): Boolean!
}

input ClearQueueInput {
    villageId: Int!
}

input EnqueueBuildingInput {
    fieldId: Int!
    type: Int!
    villageId: Int!
    targetLevel: Int
}


input DequeueBuildingInput {
    queueId: String!
    villageId: Int!
}

input DequeueBuildingAtFieldInput {
    deleteAll: Boolean!
    fieldId: Int!
    villageId: Int!
}

extend type Mutation {
    clearQueue(villageId: Int!): Boolean!
    dequeueBuilding(input: DequeueBuildingInput!): Boolean!
    dequeueBuildingAtField(input: DequeueBuildingAtFieldInput!): Boolean!
    enqueueBuilding(input: EnqueueBuildingInput!): Boolean!
    moveQueuedBuildingToIndex(villageId: Int!, queueId: String!, index: Int!): Boolean!
    moveQueuedBuildingsBlockToIndex(villageId: Int!, topBuildingQueueId: String!, bottomBuildingQueueId: String!, index: Int!): Boolean!
    moveQueuedBuildingAsHighAsPossible(villageId: Int!, queueId: String!): Boolean!
}

type Subscription {
    onQueueUpdated(villageId: Int!): BuildingQueue!
}
