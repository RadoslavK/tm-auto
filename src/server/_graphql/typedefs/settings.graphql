interface ITaskSettings {
    allow: Boolean!
    coolDown: CoolDown!
}

type GeneralSettings {
    allowTasks: Boolean!
    autoStart: Boolean!
    autoBuild: Boolean!
    autoUnits: Boolean!
    autoParty: Boolean!
}

type GeneralVillageSettings {
    allowTasks: Boolean!
}

type AutoStorageOptionSettings {
    allow: Boolean!
    overflowLevel: Int!
}

type AutoStorageSettings {
    allowFreeSpots: Boolean!
    granary: AutoStorageOptionSettings!
    warehouse: AutoStorageOptionSettings!
}

type AutoBuildSettings implements ITaskSettings {
    allow: Boolean!
    coolDown: CoolDown!

    autoCropFields: Boolean!
    minCrop: Int!

    autoStorage: AutoStorageSettings!
}

enum AdventureCriteria {
    Closest
    Furthest
    Random
    FirstToExpire
}

type AutoAdventureSettings implements ITaskSettings {
    allow: Boolean!
    coolDown: CoolDown!

    adventureCriteria: AdventureCriteria!
    preferHard: Boolean!
    normalMinHealth: Int!
    hardMinHealth: Int!
    maxTravelTime: Duration!
    preferredVillageId: Int
}

type HeroSettings {
    autoAdventure: AutoAdventureSettings!
}

type AutoUnitsUnitSettings {
    index: Int!
    autoBuild: Boolean!
    trainForever: Boolean!
    targetAmount: Int!
}

type AutoUnitsBuildingSettings {
    allow: Boolean!
    maxBuildTime: Duration!
    units: [AutoUnitsUnitSettings!]!
}

type AutoUnitsSettings implements ITaskSettings {
    allow: Boolean!
    coolDown: CoolDown!

    minCrop: Int!
    barracks: AutoUnitsBuildingSettings!
    stable: AutoUnitsBuildingSettings!
    workshop: AutoUnitsBuildingSettings!
    residence: AutoUnitsBuildingSettings!
}

enum PartyType {
    Small
    Large
}

type AutoPartySettings implements ITaskSettings {
    coolDown: CoolDown!
    allow: Boolean!

    minCulturePoints: Int!
    partyType: PartyType!
}

type VillageSettings {
    general: GeneralVillageSettings!
    autoBuild: AutoBuildSettings!
    autoUnits: AutoUnitsSettings!
    autoParty: AutoPartySettings!
}

extend type Query {
    generalSettings: GeneralSettings!
    hero: HeroSettings!

    generalVillageSettings(villageId: Int!): GeneralVillageSettings!
    autoBuildSettings(villageId: Int!): AutoBuildSettings!
    autoUnitsSettings(villageId: Int!): AutoUnitsSettings!
    autoPartySettings(villageId: Int!): AutoPartySettings!
}

input UpdateGeneralVillageSettingsInput {
    villageId: Int!
    allowTasks: Boolean!
}

input UpdateAutoBuildVillageSettingsInput {
    villageId: Int!
    allow: Boolean!
    coolDown: CoolDownInput!

    autoCropFields: Boolean!
    minCrop: Int!

    allowFreeSpots: Boolean!
    allowAutoGranary: Boolean!
    autoGranaryOverflowLevel: Int!
    allowAutoWarehouse: Boolean!
    autoWarehouseOverflowLevel: Int!
}

input UpdateAutoAdventureSettingsInput {
    allow: Boolean!
    coolDown: CoolDownInput!

    adventureCriteria: AdventureCriteria!
    preferHard: Boolean!
    normalMinHealth: Int!
    hardMinHealth: Int!
    maxTravelTime: DurationInput!
    preferredVillageId: Int
}

input UpdateGeneralSettingsInput {
    allowTasks: Boolean!
    autoBuild: Boolean!
    autoUnits: Boolean!
    autoStart: Boolean!
    autoParty: Boolean!
}

input UpdateAutoUnitsUnitSettingsInput {
    villageId: Int!
    unitIndex: Int!
    autoBuild: Boolean!
    trainForever: Boolean!
    targetAmount: Int!
}

input UpdateAutoUnitsBuildingSettingsInput {
    villageId: Int!
    buildingType: Int!
    allow: Boolean!
    maxBuildTime: DurationInput!
}

input UpdateAutoUnitsSettingsInput {
    villageId: Int!

    allow: Boolean!
    coolDown: CoolDownInput!

    minCrop: Int!
}

input UpdateAutoPartySettingsInput {
    villageId: Int!

    allow: Boolean!
    coolDown: CoolDownInput!

    minCulturePoints: Int!
    partyType: PartyType!
}

input ResetVillageInput {
    villageId: Int!
}

enum SettingsType {
    General
    AutoAdventure
}

enum VillageSettingsType {
    General
    AutoBuild
    AutoUnits
    AutoParty
}

extend type Mutation {
    updateGeneralSettings(settings: UpdateGeneralSettingsInput!): Boolean!
    updateAutoAdventureSettings(settings: UpdateAutoAdventureSettingsInput!): Boolean!
    updateGeneralVillageSettings(settings: UpdateGeneralVillageSettingsInput!): Boolean!
    updateAutoBuildVillageSettings(settings: UpdateAutoBuildVillageSettingsInput!): Boolean!

    updateAutoUnitsUnitSettings(settings: UpdateAutoUnitsUnitSettingsInput!): Boolean!
    updateAutoUnitsBuildingSettings(settings: UpdateAutoUnitsBuildingSettingsInput!): Boolean!
    updateAutoUnitsSettings(settings: UpdateAutoUnitsSettingsInput!): Boolean!
    updateAutoPartySettings(settings: UpdateAutoPartySettingsInput!): Boolean!

    resetSettings(type: SettingsType!): Boolean!
    resetVillageSettings(villageId: Int!, type: VillageSettingsType!): Boolean!
}

extend type Subscription {
    generalSettingsChanged: GeneralSettings!
    autoAdventureSettingsChanged: AutoAdventureSettings!

    generalVillageSettingsChanged(villageId: Int!): GeneralVillageSettings!
    autoBuildSettingsChanged(villageId: Int!): AutoBuildSettings!
    autoUnitsSettingsChanged(villageId: Int!): AutoUnitsSettings!
    autoPartySettingsChanged(villageId: Int!): AutoPartySettings!
}
