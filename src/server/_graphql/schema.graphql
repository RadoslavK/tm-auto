type AccountSettings {
  allowTasks: Boolean!
  tasksCoolDown: CoolDown!
  autoStart: Boolean!
  autoBuild: Boolean!
  autoUnits: Boolean!
  autoParty: Boolean!
}

enum AdventureCriteria {
  Closest
  Furthest
  Random
  FirstToExpire
}

type AutoAdventureSettings {
  allow: Boolean!
  coolDown: CoolDown!
  adventureCriteria: AdventureCriteria!
  preferHard: Boolean!
  normalMinHealth: Int!
  hardMinHealth: Int!
  maxTravelTime: Duration!
  preferredVillageId: Int
}

type AutoBuildLogEntryContent {
  name: String!
  type: Int!
  level: Int!
  fieldId: Int!
}

type AutoBuildSettings {
  allow: Boolean!
  coolDown: CoolDown!
  autoCropFields: Boolean!
  minCrop: Int!
  useHeroResources: Boolean!
  autoStorage: AutoStorageSettings!
}

type AutoMentorSettings {
  acceptTaskRewards: Boolean!
  acceptDailyRewards: Boolean!
}

type AutoPartySettings {
  coolDown: CoolDown!
  allowSmall: Boolean!
  allowLarge: Boolean!
  minCulturePointsSmall: Int!
  minCulturePointsLarge: Int!
}

type AutoStorageOptionSettings {
  allow: Boolean!
  overflowLevel: Int!
}

type AutoStorageSettings {
  allowFreeSpots: Boolean!
  granary: AutoStorageOptionSettings!
  warehouse: AutoStorageOptionSettings!
}

type AutoUnitsBuildingSettings {
  allow: Boolean!
  maxBuildTime: Duration!
  units: [AutoUnitsUnitSettings!]!
}

type AutoUnitsLogEntryContent {
  amount: Int!
  index: Int!
  tribe: Int!
  unitName: String!
}

type AutoUnitsSettings {
  allow: Boolean!
  coolDown: CoolDown!
  minCrop: Int!
  barracks: AutoUnitsBuildingSettings!
  stable: AutoUnitsBuildingSettings!
  workshop: AutoUnitsBuildingSettings!
  residence: AutoUnitsBuildingSettings!
}

type AutoUnitsUnitSettings {
  index: Int!
  autoBuild: Boolean!
  trainForever: Boolean!
  targetAmount: Int!
}

type AvailableNewBuilding {
  type: Int!
  name: String!
}

input AvailableNewBuildingsInput {
  fieldId: Int!
  villageId: Int!
}

enum BotState {
  None
  Pending
  Running
  Stopping
  Paused
}

type BuildingInProgress {
  level: Int!
  finishedAt: Timestamp!
  name: String!
  type: Int!
  fieldId: Int!
}

type BuildingQueue {
  buildingRanges: [QueuedBuildingRange!]!
  totalCost: Cost!
}

type BuildingSpot {
  fieldId: Int!
  level: BuildingSpotLevel!
  name: String!
  type: Int!
}

type BuildingSpotLevel {
  actual: Int!
  ongoing: Int
  queued: Int
  max: Int!
  total: Int!
}

type BuildingSpots {
  infrastructure: [BuildingSpot!]!
  resources: ResourceFields!
}

enum ClaimHeroResourcesReason {
  AutoBuild
}

input ClearQueueInput {
  villageId: Int!
}

type CoolDown {
  min: Duration!
  max: Duration!
}

input CoolDownInput {
  min: DurationInput!
  max: DurationInput!
}

type Coords {
  x: Int!
  y: Int!
}

type Cost {
  resources: Resources!
  buildTime: Duration!
}

input CreateUserAccountInput {
  username: String!
  password: String!
  server: String!
}

input DequeueBuildingAtFieldInput {
  deleteAll: Boolean!
  fieldId: Int!
  villageId: Int!
}

input DequeueBuildingInput {
  queueId: String!
  villageId: Int!
}

type Duration {
  days: Int!
  hours: Int!
  minutes: Int!
  seconds: Int!
}

input DurationInput {
  days: Int!
  hours: Int!
  minutes: Int!
  seconds: Int!
}

input EnqueueBuildingInput {
  fieldId: Int!
  type: Int!
  villageId: Int!
  targetLevel: Int
}

type GeneralSettings {
  dataPath: String!
  chromePath: String!
  headlessChrome: Boolean!
}

type GeneralVillageSettings {
  allowTasks: Boolean!
}

type HeroInformation {
  health: Int!
  state: HeroState!
  village: Village
}

enum HeroState {
  Unknown
  InVillage
  Dead
  Reviving
  OnAdventure
}

type LogEntry {
  id: String!
  timestamp: Timestamp!
  village: Village
  content: LogEntryContent!
}

union LogEntryContent = TextLogEntryContent | AutoBuildLogEntryContent | AutoUnitsLogEntryContent | ResourceClaimLogEntryContent

type Mutation {
  createAccount(account: CreateUserAccountInput!): String
  updateAccount(account: UpdateUserAccountInput!): Boolean!
  deleteAccount(accountId: String!): Boolean!
  signIn(accountId: String!): Boolean
  signOut: Boolean
  startBot: Boolean!
  stopBot: Boolean!
  setNextTaskExecution(task: TaskType!, delay: DurationInput!): Timestamp!
  setNextTasksExecution(delay: DurationInput!): Timestamp!
  setNextVillageTaskExecution(villageId: Int!, task: TaskType!, delay: DurationInput!): Timestamp!
  resetNextTaskExecution(task: TaskType!): Timestamp!
  resetNextTasksExecution: Timestamp!
  resetNextVillageTaskExecution(villageId: Int!, task: TaskType!): Timestamp!
  clearQueue(villageId: Int!): Boolean!
  dequeueBuilding(input: DequeueBuildingInput!): Boolean!
  dequeueBuildingAtField(input: DequeueBuildingAtFieldInput!): Boolean!
  enqueueBuilding(input: EnqueueBuildingInput!): Boolean!
  moveQueuedBuildingToIndex(villageId: Int!, queueId: String!, index: Int!): Boolean!
  moveQueuedBuildingsBlockToIndex(villageId: Int!, topBuildingQueueId: String!, bottomBuildingQueueId: String!, index: Int!): Boolean!
  moveQueuedBuildingAsHighAsPossible(villageId: Int!, queueId: String!): Boolean!
  updateAccountSettings(settings: UpdateAccountSettingsInput!): AccountSettings!
  resetAccountSettings: AccountSettings!
  updateAutoAdventureSettings(settings: UpdateAutoAdventureSettingsInput!): AutoAdventureSettings!
  resetAutoAdventureSettings: AutoAdventureSettings!
  updateAutoBuildSettings(villageId: Int!, settings: UpdateAutoBuildSettingsInput!): AutoBuildSettings!
  resetAutoBuildSettings(villageId: Int!): AutoBuildSettings!
  updateAutoMentorSettings(settings: UpdateAutoMentorSettingsInput!): AutoMentorSettings!
  resetAutoMentorSettings: AutoMentorSettings!
  updateAutoPartySettings(villageId: Int!, settings: UpdateAutoPartySettingsInput!): AutoPartySettings!
  resetAutoPartySettings(villageId: Int!): AutoPartySettings!
  updateAutoUnitsSettings(villageId: Int!, settings: UpdateAutoUnitsSettingsInput!): AutoUnitsSettings!
  updateAutoUnitsBuildingSettings(villageId: Int!, buildingType: Int!, settings: UpdateAutoUnitsBuildingSettingsInput!): AutoUnitsBuildingSettings!
  updateAutoUnitsUnitSettings(villageId: Int!, settings: UpdateAutoUnitsUnitSettingsInput!): AutoUnitsUnitSettings!
  resetAutoUnitsSettings(villageId: Int!): AutoUnitsSettings!
  updateGeneralSettings(settings: UpdateGeneralSettingsInput!): GeneralSettings!
  resetGeneralSettings: GeneralSettings!
  updateGeneralVillageSettings(villageId: Int!, settings: UpdateGeneralVillageSettingsInput!): GeneralVillageSettings!
  resetGeneralVillageSettings(villageId: Int!): GeneralVillageSettings!
  refreshVillage(villageId: Int!): Boolean!
}

type Query {
  accounts: [UserAccount!]!
  account(accountId: String!): UserAccount
  currentAccount: UserAccount!
  lastSignedAccountId: String
  availableNewBuildings(input: AvailableNewBuildingsInput!): [AvailableNewBuilding!]!
  buildingSpots(villageId: Int!): BuildingSpots!
  maxBuildingLevel(buildingType: Int!): Int!
  buildingsInProgress(villageId: Int!): [BuildingInProgress!]!
  isBotActive: Boolean!
  botState: BotState!
  heroInformation: HeroInformation!
  logsEntries: [LogEntry!]!
  nextTasksExecution: Timestamp!
  nextTaskExecution(task: TaskType!): Timestamp!
  nextVillageTaskExecution(villageId: Int!, task: TaskType!): Timestamp!
  buildingQueue(villageId: Int!): BuildingQueue!
  canMoveQueuedBuildingToIndex(villageId: Int!, queueId: String!, index: Int!): Boolean!
  canMoveQueuedBuildingsBlockToIndex(villageId: Int!, topBuildingQueueId: String!, bottomBuildingQueueId: String!, index: Int!): Boolean!
  accountSettings: AccountSettings!
  autoAdventureSettings: AutoAdventureSettings!
  autoBuildSettings(villageId: Int!): AutoBuildSettings!
  autoMentorSettings: AutoMentorSettings!
  autoPartySettings(villageId: Int!): AutoPartySettings!
  autoUnitsSettings(villageId: Int!): AutoUnitsSettings!
  generalSettings: GeneralSettings!
  generalVillageSettings(villageId: Int!): GeneralVillageSettings!
  unitInfo(index: Int!): UnitInfo!
  activeVillageId: Int!
  village(villageId: Int!): Village
  villages: [Village!]!
  crannyCapacity(villageId: Int!): VillageCrannyCapacity!
}

type QueuedBuilding {
  level: Int!
  name: String!
  type: Int!
  queueId: String!
  queueIndex: Int!
  cost: Cost!
  fieldId: Int!
}

type QueuedBuildingRange {
  id: String!
  buildings: [QueuedBuilding!]!
  type: Int!
  name: String!
  fieldId: Int!
  cost: Cost!
}

type ResourceClaimLogEntryContent {
  reason: ClaimHeroResourcesReason!
  resources: Resources!
}

type ResourceFields {
  wood: [BuildingSpot!]!
  clay: [BuildingSpot!]!
  iron: [BuildingSpot!]!
  crop: [BuildingSpot!]!
}

type Resources {
  wood: Int!
  clay: Int!
  iron: Int!
  crop: Int!
  freeCrop: Int!
  total: Int!
}

type Subscription {
  actualBuildingLevelsUpdate(villageId: Int!): Boolean!
  buildingsInProgressUpdated(villageId: Int!): [BuildingInProgress!]!
  botActivityChanged: Boolean!
  onBotRunningChanged: Boolean!
  heroInformationUpdated: HeroInformation!
  onLogEntryAdded: LogEntry!
  nextTasksExecutionChanged: Timestamp!
  nextTaskExecutionChanged(task: TaskType!): Timestamp!
  nextVillageTaskExecutionChanged(villageId: Int!, task: TaskType!): Timestamp!
  onQueueUpdated(villageId: Int!): BuildingQueue!
  villageUpdated(villageId: Int!): Village!
  villagesUpdated: [Village!]!
  activeVillageIdChanged: Int!
}

enum TaskType {
  AutoAdventure
  AutoBuild
  AutoUnits
  AutoParty
  AutoMentor
}

type TextLogEntryContent {
  message: String!
  messageType: TextLogEntryType!
}

enum TextLogEntryType {
  Info
  Error
}

type Timestamp {
  totalSeconds: Int!
}

input TimestampInput {
  totalSeconds: Int!
}

type UnitInfo {
  name: String!
}

input UpdateAccountSettingsInput {
  allowTasks: Boolean!
  tasksCoolDown: CoolDownInput!
  autoBuild: Boolean!
  autoUnits: Boolean!
  autoStart: Boolean!
  autoParty: Boolean!
}

input UpdateAutoAdventureSettingsInput {
  allow: Boolean!
  coolDown: CoolDownInput!
  adventureCriteria: AdventureCriteria!
  preferHard: Boolean!
  normalMinHealth: Int!
  hardMinHealth: Int!
  maxTravelTime: DurationInput!
  preferredVillageId: Int
}

input UpdateAutoBuildSettingsInput {
  allow: Boolean!
  coolDown: CoolDownInput!
  autoCropFields: Boolean!
  minCrop: Int!
  useHeroResources: Boolean!
  autoStorage: UpdateAutoStorageSettingsInput!
}

input UpdateAutoMentorSettingsInput {
  acceptTaskRewards: Boolean!
  acceptDailyRewards: Boolean!
}

input UpdateAutoPartySettingsInput {
  allowSmall: Boolean!
  allowLarge: Boolean!
  coolDown: CoolDownInput!
  minCulturePointsSmall: Int!
  minCulturePointsLarge: Int!
}

input UpdateAutoStorageOptionSettingsInput {
  allow: Boolean!
  overflowLevel: Int!
}

input UpdateAutoStorageSettingsInput {
  allowFreeSpots: Boolean!
  granary: UpdateAutoStorageOptionSettingsInput!
  warehouse: UpdateAutoStorageOptionSettingsInput!
}

input UpdateAutoUnitsBuildingSettingsInput {
  allow: Boolean!
  maxBuildTime: DurationInput!
}

input UpdateAutoUnitsSettingsInput {
  allow: Boolean!
  coolDown: CoolDownInput!
  minCrop: Int!
}

input UpdateAutoUnitsUnitSettingsInput {
  index: Int!
  autoBuild: Boolean!
  trainForever: Boolean!
  targetAmount: Int!
}

input UpdateGeneralSettingsInput {
  dataPath: String!
  chromePath: String!
  headlessChrome: Boolean!
}

input UpdateGeneralVillageSettingsInput {
  allowTasks: Boolean!
}

input UpdateUserAccountInput {
  id: String!
  username: String!
  password: String!
  server: String!
}

type UserAccount {
  id: String!
  username: String!
  password: String!
  server: String!
}

type Village {
  id: Int!
  coords: Coords!
  name: String!
  resources: VillageResources!
  isCapital: Boolean!
}

type VillageCapacity {
  granary: Int!
  warehouse: Int!
}

type VillageCrannyCapacity {
  actual: Int!
  ongoing: Int!
  total: Int!
}

type VillageResources {
  amount: Resources!
  capacity: VillageCapacity!
  production: Resources!
}
