input AccountInput {
  username: String!
  password: String!
  server: String!
}

type AccountSettings {
  allowTasks: Boolean!
  tasksCoolDown: CoolDown!
  autoStart: Boolean!
  autoBuild: Boolean!
  autoUnits: Boolean!
  autoParty: Boolean!
}

enum AdventureCriteria {
  Closest
  Furthest
  Random
}

type AutoAdventureSettings {
  allow: Boolean!
  coolDown: CoolDown!
  adventureCriteria: AdventureCriteria!
  preferHard: Boolean!
  normalMinHealth: Int!
  hardMinHealth: Int!
  maxTravelTime: Duration!
  preferredVillageId: ID
}

type AutoBuildLogEntryContent {
  name: String!
  type: BuildingType!
  level: Int!
  fieldId: Int!
}

type AutoBuildSettings {
  allow: Boolean!
  allowDualQueue: Boolean!
  coolDown: CoolDown!
  autoCropFields: Boolean!
  minCrop: Int!
  useHeroResources: Boolean!
  autoStorage: AutoStorageSettings!
}

type AutoMentorSettings {
  acceptTaskRewards: Boolean!
  acceptDailyRewards: Boolean!
}

type AutoPartySettings {
  coolDown: CoolDown!
  allowSmall: Boolean!
  allowLarge: Boolean!
  minCulturePointsSmall: Int!
  minCulturePointsLarge: Int!
}

type AutoStorageOptionSettings {
  allow: Boolean!
  overflowLevel: Int!
}

type AutoStorageSettings {
  allowFreeSpots: Boolean!
  granary: AutoStorageOptionSettings!
  warehouse: AutoStorageOptionSettings!
}

type AutoUnitsBuildingSettings {
  allow: Boolean!
  maxBuildTime: Duration!
  units: [AutoUnitsUnitSettings!]!
}

type AutoUnitsLogEntryContent {
  amount: Int!
  index: Int!
  tribe: Tribe!
  unitName: String!
}

type AutoUnitsSettings {
  allow: Boolean!
  coolDown: CoolDown!
  useHeroResources: Boolean!
  minCrop: Int!
  barracks: AutoUnitsBuildingSettings!
  stable: AutoUnitsBuildingSettings!
  workshop: AutoUnitsBuildingSettings!
  residence: AutoUnitsBuildingSettings!
}

type AutoUnitsUnitSettings {
  index: Int!
  autoBuild: Boolean!
  trainForever: Boolean!
  targetAmount: Int!
}

input AvailableNewBuildingsInput {
  fieldId: Int!
  villageId: ID!
}

enum BotState {
  None
  Pending
  Running
  Stopping
  Paused
}

type BuildingInfo {
  maxLevel: Int!
  name: String!
}

type BuildingInProgress {
  level: Int!
  finishedAt: Timestamp!
  type: BuildingType!
  fieldId: Int!
}

type BuildingLevelInfo {
  cost: Resources!
}

type BuildingQueue {
  buildingRanges: [QueuedBuildingRange!]!
  totalBuildingTime: Duration!
  totalCost: Resources!
}

type BuildingSpot {
  fieldId: Int!
  level: BuildingSpotLevel!
  type: BuildingType!
}

type BuildingSpotLevel {
  actual: Int!
  ongoing: Int
  queued: Int
  total: Int!
}

type BuildingSpots {
  infrastructure: [BuildingSpot!]!
  resources: ResourceFields!
}

enum BuildingType {
  None
  Wood
  Clay
  Iron
  Crop
  Sawmill
  Brickyard
  IronFoundry
  GrainMill
  Bakery
  Warehouse
  Granary
  Blacksmith
  Smithy
  TournamentSquare
  MainBuilding
  RallyPoint
  Marketplace
  Embassy
  Barracks
  Stable
  Workshop
  Academy
  Cranny
  TownHall
  Residence
  Palace
  Treasury
  TradeOffice
  GreatBarracks
  GreatStable
  CityWall
  EarthWall
  Palisade
  StonemasonsLodge
  Brewery
  Trapper
  HerosMansion
  GreatWarehouse
  GreatGranary
  WonderOfTheWorld
  HorseDrinkingTrough
  StoneWall
  MakeshiftWall
  CommandCenter
  Waterworks
}

enum ClaimHeroResourcesReason {
  AutoBuild
  AutoUnits
}

input ClearQueueInput {
  villageId: ID!
}

type CoolDown {
  min: Duration!
  max: Duration!
}

input CoolDownInput {
  min: DurationInput!
  max: DurationInput!
}

type Coords {
  x: Int!
  y: Int!
}

input DequeueBuildingAtFieldInput {
  targetLevel: Int
  fieldId: Int!
  villageId: ID!
}

input DequeueBuildingInput {
  queueId: ID!
  villageId: ID!
}

type Duration {
  days: Int!
  hours: Int!
  minutes: Int!
  seconds: Int!
}

input DurationInput {
  days: Int!
  hours: Int!
  minutes: Int!
  seconds: Int!
}

input EnqueueBuildingInput {
  fieldId: Int!
  type: BuildingType!
  villageId: ID!
  targetLevel: Int
}

type GameInfo {
  tribe: Tribe!
}

type GeneralSettings {
  dataPath: String!
  chromePath: String!
  headlessChrome: Boolean!
}

type GeneralVillageSettings {
  allowTasks: Boolean!
}

type HeroInformation {
  health: Int!
  state: HeroState!
  village: Village
}

enum HeroState {
  Unknown
  InVillage
  Dead
  Reviving
  OnAdventure
}

type LogEntry {
  timestamp: Timestamp!
  village: Village
  content: LogEntryContent!
}

union LogEntryContent = TextLogEntryContent | AutoBuildLogEntryContent | AutoUnitsLogEntryContent | ResourceClaimLogEntryContent

type Mutation {
  createAccount(account: AccountInput!): UserAccount!
  updateAccount(id: ID!, account: AccountInput!): UserAccount!
  deleteAccount(id: ID!): UserAccount!
  signIn(accountId: ID!): Boolean
  signOut: Boolean
  startBot: Boolean
  stopBot: Boolean
  setNextTaskExecution(task: TaskType!, delay: DurationInput!): Timestamp!
  setNextTasksExecution(delay: DurationInput!): Timestamp!
  setNextVillageTaskExecution(villageId: ID!, task: TaskType!, delay: DurationInput!): Timestamp!
  resetNextTaskExecution(task: TaskType!): Timestamp!
  resetNextTasksExecution: Timestamp!
  resetNextVillageTaskExecution(villageId: ID!, task: TaskType!): Timestamp!
  clearQueue(villageId: ID!): Boolean
  dequeueBuilding(input: DequeueBuildingInput!): Boolean
  dequeueBuildingsBlock(villageId: ID!, topBuildingQueueId: ID!, bottomBuildingQueueId: ID!): Boolean
  dequeueBuildingAtField(input: DequeueBuildingAtFieldInput!): Boolean
  enqueueBuilding(input: EnqueueBuildingInput!): Boolean
  moveQueuedBuildingToIndex(villageId: ID!, queueId: ID!, index: Int!): Boolean
  moveQueuedBuildingsBlockToIndex(villageId: ID!, topBuildingQueueId: ID!, bottomBuildingQueueId: ID!, index: Int!): Boolean
  moveQueuedBuildingAsHighAsPossible(villageId: ID!, queueId: ID!): Boolean
  moveQueuedBuildingsBlockAsHighAsPossible(villageId: ID!, topBuildingQueueId: ID!, bottomBuildingQueueId: ID!): Boolean
  updateAccountSettings(settings: UpdateAccountSettingsInput!): AccountSettings!
  resetAccountSettings: AccountSettings!
  updateAutoAdventureSettings(settings: UpdateAutoAdventureSettingsInput!): AutoAdventureSettings!
  resetAutoAdventureSettings: AutoAdventureSettings!
  updateAutoBuildSettings(villageId: ID!, settings: UpdateAutoBuildSettingsInput!): AutoBuildSettings!
  resetAutoBuildSettings(villageId: ID!): AutoBuildSettings!
  updateAutoMentorSettings(settings: UpdateAutoMentorSettingsInput!): AutoMentorSettings!
  resetAutoMentorSettings: AutoMentorSettings!
  updateAutoPartySettings(villageId: ID!, settings: UpdateAutoPartySettingsInput!): AutoPartySettings!
  resetAutoPartySettings(villageId: ID!): AutoPartySettings!
  updateAutoUnitsSettings(villageId: ID!, settings: UpdateAutoUnitsSettingsInput!): AutoUnitsSettings!
  updateAutoUnitsBuildingSettings(villageId: ID!, buildingType: BuildingType!, settings: UpdateAutoUnitsBuildingSettingsInput!): AutoUnitsSettings!
  updateAutoUnitsUnitSettings(villageId: ID!, settings: UpdateAutoUnitsUnitSettingsInput!): AutoUnitsSettings!
  resetAutoUnitsSettings(villageId: ID!): AutoUnitsSettings!
  updateGeneralSettings(settings: UpdateGeneralSettingsInput!): GeneralSettings!
  resetGeneralSettings: GeneralSettings!
  updateGeneralVillageSettings(villageId: ID!, settings: UpdateGeneralVillageSettingsInput!): GeneralVillageSettings!
  resetGeneralVillageSettings(villageId: ID!): GeneralVillageSettings!
  refreshVillage(villageId: ID!): Boolean
}

type Query {
  account(id: ID!): UserAccount!
  accounts: [UserAccount!]!
  currentAccount: UserAccount!
  isAccountTaken(account: AccountInput!): Boolean!
  lastSignedAccountId: String
  availableNewBuildingsTypes(input: AvailableNewBuildingsInput!): [BuildingType!]!
  buildingInfo(buildingType: BuildingType!): BuildingInfo!
  buildingLevelInfo(buildingType: BuildingType!, level: Int!): BuildingLevelInfo!
  buildingSpots(villageId: ID!): BuildingSpots!
  buildingsInProgress(villageId: ID!): [BuildingInProgress!]!
  isBotActive: Boolean!
  botState: BotState!
  gameInfo: GameInfo!
  heroInformation: HeroInformation!
  logEntries: [LogEntry!]!
  nextTasksExecution: Timestamp!
  nextTaskExecution(task: TaskType!): Timestamp!
  nextVillageTaskExecution(villageId: ID!, task: TaskType!): Timestamp!
  buildingQueue(villageId: ID!): BuildingQueue!
  canMoveQueuedBuildingToIndex(villageId: ID!, queueId: ID!, index: Int!): Boolean!
  canMoveQueuedBuildingsBlockToIndex(villageId: ID!, topBuildingQueueId: ID!, bottomBuildingQueueId: ID!, index: Int!): Boolean!
  accountSettings: AccountSettings!
  autoAdventureSettings: AutoAdventureSettings!
  autoBuildSettings(villageId: ID!): AutoBuildSettings!
  autoMentorSettings: AutoMentorSettings!
  autoPartySettings(villageId: ID!): AutoPartySettings!
  autoUnitsSettings(villageId: ID!): AutoUnitsSettings!
  generalSettings: GeneralSettings!
  generalVillageSettings(villageId: ID!): GeneralVillageSettings!
  unitInfo(index: Int!): UnitInfo!
  activeVillageId: ID!
  village(villageId: ID!): Village
  villages: [Village!]!
  crannyCapacity(villageId: ID!): VillageCrannyCapacity!
}

type QueuedBuilding {
  buildingTime: Duration!
  level: Int!
  type: BuildingType!
  queueId: ID!
  queueIndex: Int!
  fieldId: Int!
}

type QueuedBuildingRange {
  id: String!
  buildings: [QueuedBuilding!]!
  type: BuildingType!
  fieldId: Int!
  buildingTime: Duration!
  cost: Resources!
}

type ResourceClaimLogEntryContent {
  reason: ClaimHeroResourcesReason!
  resources: Resources!
}

type ResourceFields {
  wood: [BuildingSpot!]!
  clay: [BuildingSpot!]!
  iron: [BuildingSpot!]!
  crop: [BuildingSpot!]!
}

type Resources {
  wood: Int!
  clay: Int!
  iron: Int!
  crop: Int!
  freeCrop: Int!
  total: Int!
}

type Subscription {
  actualBuildingLevelsUpdated(villageId: ID!): Boolean
  buildingsInProgressUpdated(villageId: ID!): [BuildingInProgress!]!
  botActivityChanged: Boolean!
  botStateChanged: BotState!
  heroInformationUpdated: HeroInformation!
  logEntryAdded: LogEntry!
  nextTasksExecutionChanged: Timestamp!
  nextTaskExecutionChanged(task: TaskType!): Timestamp!
  nextVillageTaskExecutionChanged(villageId: ID!, task: TaskType!): Timestamp!
  queueUpdated(villageId: ID!): BuildingQueue!
  villageUpdated(villageId: ID!): Village!
  villagesUpdated: [Village!]!
  activeVillageIdChanged: ID!
}

enum TaskType {
  AutoAdventure
  AutoBuild
  AutoUnits
  AutoParty
  AutoMentor
}

type TextLogEntryContent {
  message: String!
  messageType: TextLogEntryType!
}

enum TextLogEntryType {
  Info
  Error
}

type Timestamp {
  totalSeconds: Int!
}

input TimestampInput {
  totalSeconds: Int!
}

enum Tribe {
  Romans
  Teutons
  Gauls
  Nature
  Natars
  Egyptians
  Huns
}

type UnitInfo {
  name: String!
}

input UpdateAccountSettingsInput {
  allowTasks: Boolean!
  tasksCoolDown: CoolDownInput!
  autoBuild: Boolean!
  autoUnits: Boolean!
  autoStart: Boolean!
  autoParty: Boolean!
}

input UpdateAutoAdventureSettingsInput {
  allow: Boolean!
  coolDown: CoolDownInput!
  adventureCriteria: AdventureCriteria!
  preferHard: Boolean!
  normalMinHealth: Int!
  hardMinHealth: Int!
  maxTravelTime: DurationInput!
  preferredVillageId: ID
}

input UpdateAutoBuildSettingsInput {
  allow: Boolean!
  allowDualQueue: Boolean!
  coolDown: CoolDownInput!
  autoCropFields: Boolean!
  minCrop: Int!
  useHeroResources: Boolean!
  autoStorage: UpdateAutoStorageSettingsInput!
}

input UpdateAutoMentorSettingsInput {
  acceptTaskRewards: Boolean!
  acceptDailyRewards: Boolean!
}

input UpdateAutoPartySettingsInput {
  allowSmall: Boolean!
  allowLarge: Boolean!
  coolDown: CoolDownInput!
  minCulturePointsSmall: Int!
  minCulturePointsLarge: Int!
}

input UpdateAutoStorageOptionSettingsInput {
  allow: Boolean!
  overflowLevel: Int!
}

input UpdateAutoStorageSettingsInput {
  allowFreeSpots: Boolean!
  granary: UpdateAutoStorageOptionSettingsInput!
  warehouse: UpdateAutoStorageOptionSettingsInput!
}

input UpdateAutoUnitsBuildingSettingsInput {
  allow: Boolean!
  maxBuildTime: DurationInput!
}

input UpdateAutoUnitsSettingsInput {
  allow: Boolean!
  coolDown: CoolDownInput!
  useHeroResources: Boolean!
  minCrop: Int!
}

input UpdateAutoUnitsUnitSettingsInput {
  index: Int!
  autoBuild: Boolean!
  trainForever: Boolean!
  targetAmount: Int!
}

input UpdateGeneralSettingsInput {
  dataPath: String!
  chromePath: String!
  headlessChrome: Boolean!
}

input UpdateGeneralVillageSettingsInput {
  allowTasks: Boolean!
}

type UserAccount {
  id: ID!
  username: String!
  password: String!
  server: String!
}

type Village {
  id: ID!
  coords: Coords!
  name: String!
  resources: VillageResources!
  isCapital: Boolean!
}

type VillageCapacity {
  granary: Int!
  warehouse: Int!
}

type VillageCrannyCapacity {
  actual: Int!
  ongoing: Int!
  total: Int!
}

type VillageResources {
  amount: Resources!
  capacity: VillageCapacity!
  production: Resources!
}
