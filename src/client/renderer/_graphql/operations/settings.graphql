#import "./misc.graphql"

fragment CoolDown on CoolDown {
    min {
        ...Duration
    }
    max {
        ...Duration
    }
}

fragment AutoMentorSettings on AutoMentorSettings {
    allow
    disabledRewardIds
    reserveResourceRewardsForOtherTasks
}

fragment AutoUnitsUnitSettings on AutoUnitsUnitSettings {
    autoBuild
    index
    targetAmount
    trainForever
}

fragment AutoUnitsBuildingSettings on AutoUnitsBuildingSettings {
    allow
    maxBuildTime {
        ...Duration
    }
    units {
        ...AutoUnitsUnitSettings
    }
}

fragment GeneralSettings on GeneralSettings {
    allowTasks
    autoStart
    autoBuild
    autoUnits
    autoParty
}

fragment AutoAdventureSettings on AutoAdventureSettings {
    allow
    coolDown {
        ...CoolDown
    }
    adventureCriteria
    hardMinHealth
    normalMinHealth
    maxTravelTime {
        ...Duration
    }
    preferHard
    preferredVillageId
}

fragment GeneralVillageSettings on GeneralVillageSettings {
    allowTasks
}

fragment AutoStorageOptionSettings on AutoStorageOptionSettings {
    allow
    overflowLevel
}

fragment AutoStorageSettings on AutoStorageSettings {
    granary {
        ...AutoStorageOptionSettings
    }
    warehouse {
        ...AutoStorageOptionSettings
    }
    allowFreeSpots
}

fragment AutoBuildSettings on AutoBuildSettings {
    allow
    coolDown {
        ...CoolDown
    }
    autoCropFields
    minCrop
    autoStorage {
        ...AutoStorageSettings
    }
}

fragment AutoUnitsSettings on AutoUnitsSettings {
    allow
    coolDown {
        ...CoolDown
    }
    minCrop
    barracks {
        ...AutoUnitsBuildingSettings
    }
    stable {
        ...AutoUnitsBuildingSettings
    }
    workshop {
        ...AutoUnitsBuildingSettings
    }
    residence {
        ...AutoUnitsBuildingSettings
    }
}

fragment AutoPartySettings on AutoPartySettings {
    allow
    coolDown {
        ...CoolDown
    }
    minCulturePoints
    partyType
}

query GetAutoMentorSettings {
    autoMentorSettings {
        ...AutoMentorSettings
    }
}

mutation UpdateAutoMentorSettings($settings: UpdateAutoMentorSettingsInput!) {
    updateAutoMentorSettings(settings: $settings) {
        ...AutoMentorSettings
    }
}

query GetGeneralSettings {
    generalSettings {
        ...GeneralSettings
    }
}

query GetAutoAdventureSettings {
    autoAdventureSettings {
        ...AutoAdventureSettings
    }
}

query GetGeneralVillageSettings($villageId: Int!) {
    generalVillageSettings(villageId: $villageId) {
        ...GeneralVillageSettings
    }
}

query GetAutoBuildSettings($villageId: Int!) {
    autoBuildSettings(villageId: $villageId) {
        ...AutoBuildSettings
    }
}

query GetAutoUnitsSettings($villageId: Int!) {
    autoUnitsSettings(villageId: $villageId) {
        ...AutoUnitsSettings
    }
}

query GetAutoPartySettings($villageId: Int!) {
    autoPartySettings(villageId: $villageId) {
        ...AutoPartySettings
    }
}

mutation UpdateGeneralSettings($settings: UpdateGeneralSettingsInput!) {
    updateGeneralSettings(settings: $settings) {
        ...GeneralSettings
    }
}

mutation UpdateAutoAdventureSettings($settings: UpdateAutoAdventureSettingsInput!) {
    updateAutoAdventureSettings(settings: $settings) {
        ...AutoAdventureSettings
    }
}

mutation UpdateGeneralVillageSettings($villageId: Int!, $settings: UpdateGeneralVillageSettingsInput!) {
    updateGeneralVillageSettings(villageId: $villageId, settings: $settings) {
        ...GeneralVillageSettings
    }
}

mutation UpdateAutoBuildSettings($villageId: Int!, $settings: UpdateAutoBuildSettingsInput!) {
    updateAutoBuildSettings(villageId: $villageId, settings: $settings) {
        ...AutoBuildSettings
    }
}

mutation UpdateAutoUnitsUnitSettings($villageId: Int!, $settings: UpdateAutoUnitsUnitSettingsInput!) {
    updateAutoUnitsUnitSettings(villageId: $villageId, settings: $settings) {
        ...AutoUnitsUnitSettings
    }
}

mutation UpdateAutoUnitsBuildingSettings($villageId: Int!, $buildingType: Int!, $settings: UpdateAutoUnitsBuildingSettingsInput!) {
    updateAutoUnitsBuildingSettings(villageId: $villageId, buildingType: $buildingType, settings: $settings) {
        ...AutoUnitsBuildingSettings
    }
}

mutation UpdateAutoUnitsSettings($villageId: Int!, $settings: UpdateAutoUnitsSettingsInput!) {
    updateAutoUnitsSettings(villageId: $villageId, settings: $settings) {
        ...AutoUnitsSettings
    }
}

mutation UpdateAutoPartySettings($villageId: Int!, $settings: UpdateAutoPartySettingsInput!) {
    updateAutoPartySettings(villageId: $villageId, settings: $settings) {
        ...AutoPartySettings
    }
}

mutation ResetAutoAdventureSettings {
    resetAutoAdventureSettings {
        ...AutoAdventureSettings
    }
}

mutation ResetAutoBuildSettings($villageId: Int!) {
    resetAutoBuildSettings(villageId: $villageId) {
        ...AutoBuildSettings
    }
}

mutation ResetAutoMentorSettings {
    resetAutoMentorSettings {
        ...AutoMentorSettings
    }
}

mutation ResetAutoPartySettings($villageId: Int!) {
    resetAutoPartySettings(villageId: $villageId) {
        ...AutoPartySettings
    }
}

mutation ResetAutoUnitsSettings($villageId: Int!) {
    resetAutoUnitsSettings(villageId: $villageId) {
        ...AutoUnitsSettings
    }
}

mutation ResetGeneralSettings {
    resetGeneralSettings {
        ...GeneralSettings
    }
}

mutation ResetGeneralVillageSettings($villageId: Int!) {
    resetGeneralVillageSettings(villageId: $villageId) {
        ...GeneralVillageSettings
    }
}