#import "./misc.graphql"

mutation ClearQueue($villageId: Int!) {
    clearQueue(villageId: $villageId)
}

mutation EnqueueBuilding($input: EnqueueBuildingInput!) {
    enqueueBuilding(input: $input)
}

mutation DequeueBuilding($input: QueuedBuildingManipulationInput!) {
    dequeueBuilding(input: $input)
}

mutation DequeueBuildingAtField($input: DequeueBuildingAtFieldInput!) {
    dequeueBuildingAtField(input: $input)
}

mutation MoveQueuedBuildingDown($input: QueuedBuildingManipulationInput!) {
    moveQueuedBuildingDown(input: $input)
}

mutation MoveQueuedBuildingUp($input: QueuedBuildingManipulationInput!) {
    moveQueuedBuildingUp(input: $input)
}

mutation MoveQueuedBuildingAsHighAsPossible($villageId: Int!, $queueId: ID!) {
    moveQueuedBuildingAsHighAsPossible(villageId: $villageId, queueId: $queueId)
}

fragment BuildingQueue on BuildingQueue {
    buildings {
        canMoveDown
        canMoveUp
        cost {
            ...Cost
        }
        name
        level
        type
        queueId
        fieldId
    }
    totalCost {
        ...Cost
    }
}

query GetQueuedBuildings($villageId: Int!) {
    buildingQueue(villageId: $villageId) {
        ...BuildingQueue
    }
}

subscription OnQueueUpdated($villageId: Int!) {
    onQueueUpdated(villageId: $villageId) {
        ...BuildingQueue
    }
}
